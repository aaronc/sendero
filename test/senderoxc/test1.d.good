module test1;
/*DO NOT EDIT THIS FILE!*/

import sendero.routing.Router, sendero.http.Request, sendero.routing.IRoute, sendero.view.View;
import sendero_base.Core, sendero.db.Bind, sendero.vm.Bind, sendero.validation.Validations;
import sendero.db.DBProvider;
import sendero.http.Request, sendero.routing.Convert;
import sendero.core.Memory;
import sendero.util.collection.StaticBitArray, sendero.util.Singleton;



import test2;
import IUser;

import dummy;

/+@controller+/ class MainCtlr
: IIController

{
	/+@GET+/
	static Res index()
	{
	
	}

	/+@POST+/
	static Res login(char[] username, char[] password)
	{

	}
	
	/+@GET+/
	static Res logout()
	{
	
	}
	
	/+@POST+/
	static Res signup(char[] firstname, char[] lastname, char[] email,
						char[] pswd, char[] pswdConfirm)
	{
		
	}
	
	/+@POST+/
	static Res resetPswd(char[] email)
	{
	
	}
	
	static IIController getInstance(Req req)
	{
		
	}

static const TypeSafeRouter!(Req) r;
static const TypeSafeInstanceRouter!(Req) ir;
static this()
{
	r = TypeSafeRouter!(Req)();
	ir = TypeSafeInstanceRouter!(Req)();
	r.map!(Res function())(GET,"", &MainCtlr.index, []);
	r.map!(Res function(char[],char[]))(POST,"login", &MainCtlr.login, ["username", "password"]);
	r.map!(Res function())(GET,"logout", &MainCtlr.logout, []);
	r.map!(Res function(char[],char[],char[],char[],char[]))(POST,"signup", &MainCtlr.signup, ["firstname", "lastname", "email", "pswd", "pswdConfirm"]);
	r.map!(Res function(char[]))(POST,"resetPswd", &MainCtlr.resetPswd, ["email"]);
}

static void route(Req req)
{ return r.route(req); }
void iroute(Req req)
{ return ir.route(req, cast(void*)this); }

}

/+@controller+/ class UserCtlr
: IIController

{
	/+@POST+/
	Res changePswd(char[] curPswd, char[] newPswd, char[] newPswdConfirm)
	{
	
	}

static const TypeSafeRouter!(Req) r;
static const TypeSafeInstanceRouter!(Req) ir;
static this()
{
	r = TypeSafeRouter!(Req)();
	ir = TypeSafeInstanceRouter!(Req)();
	ir.map!(Res function(char[],char[],char[]))(POST,"changePswd", &UserCtlr.changePswd, ["curPswd", "newPswd", "newPswdConfirm"]);
}

static void route(Req req)
{ return r.route(req); }
void iroute(Req req)
{ return ir.route(req, cast(void*)this); }

}

/+@controller+/ class GroupCtlr
: IIController

{
	/+@GET+/
	static Res create()
	{
	
	}
	
	/+@POST+/
	static Res create()
	{
	
	}

static const TypeSafeRouter!(Req) r;
static const TypeSafeInstanceRouter!(Req) ir;
static this()
{
	r = TypeSafeRouter!(Req)();
	ir = TypeSafeInstanceRouter!(Req)();
	r.map!(Res function())(GET,"create", &GroupCtlr.create, []);
	r.map!(Res function())(POST,"create", &GroupCtlr.create, []);
}

static void route(Req req)
{ return r.route(req); }
void iroute(Req req)
{ return ir.route(req, cast(void*)this); }

}


/+@data+/ class User
: IUser

{
	/+@primaryKey+/ /+@autoIncrement+/ /+@UInt("id")+/;
	/+@required+/ /+@String("email")+/;
	/+@minLength(8)+/ /+@maxLength(40)+/ /+@String("username")+/; 
	/+@String("firstname")+/;
	/+@String("lastname")+/;
	/+@Time("last_login")+/;

static this()
{
	Construct!(IUser).register(&create);
}
static IUser create()
{
	return new User;
}
private static MinLengthValidation username_MinLengthValidation;
private static MaxLengthValidation username_MaxLengthValidation;

bool validate()
{
	bool succeed = true;

	void fail(char[] field, Error err)	{
		succeed = false;
		__errors__.add(field, err);
	}

	if(!ExistenceValidation!(char[]).validate(email_)) fail("email_", ExistenceValidation!(char[]).error);
	if(!username_MinLengthValidation.validate(username_)) fail("username_", username_MinLengthValidation.error);
	if(!username_MaxLengthValidation.validate(username_)) fail("username_", username_MaxLengthValidation.error);

	return succeed;
}


mixin SessionAllocate!();

ErrorMap errors()
{
	return __errors__;
}
void clearErrors()
{
	__errors__.reset;
}
private ErrorMap __errors__;
alias DefaultDatabaseProvider db;
private static char[] deleteSql;
public void destroy()
{
	if(!deleteSql.length) deleteSql = db.sqlGen.makeDeleteSql("User", ["id"]);
	scope st = db.prepare(deleteSql);
	st.execute(id);
}

Var opIndex(char[] key)
{
	Var res;
	switch(key)
	{
		case "id": bind(res, id()); break;
		case "email": bind(res, email()); break;
		case "username": bind(res, username()); break;
		case "firstname": bind(res, firstname()); break;
		case "lastname": bind(res, lastname()); break;
		case "last_login": bind(res, last_login()); break;
		default: return Var();
	}
	return res;
}
int opApply (int delegate (inout char[] key, inout Var val) dg)
{
	int res; char[] key; Var val;
	key = "id"; bind(val, id()); if((res = dg(key, val)) != 0) return res;
	key = "email"; bind(val, email()); if((res = dg(key, val)) != 0) return res;
	key = "username"; bind(val, username()); if((res = dg(key, val)) != 0) return res;
	key = "firstname"; bind(val, firstname()); if((res = dg(key, val)) != 0) return res;
	key = "lastname"; bind(val, lastname()); if((res = dg(key, val)) != 0) return res;
	key = "last_login"; bind(val, last_login()); if((res = dg(key, val)) != 0) return res;
	return res;
}
void opIndexAssign(Var val, char[] key) {}
Var opCall(Var[] params, IExecContext ctxt) { return Var(); }
void toString(IExecContext ctxt, void delegate(char[]) utf8Writer, char[] flags = null) {}


private StaticBitArray!(1,6) __touched__;


void httpSet(IObject obj, Request req)
{
	foreach(key, val; obj)
	{
		switch(key)
		{
			case "email": email_ = convertParam2!(char[], Req)(val, req); break;
			case "username": username_ = convertParam2!(char[], Req)(val, req); break;
			case "firstname": firstname_ = convertParam2!(char[], Req)(val, req); break;
			case "lastname": lastname_ = convertParam2!(char[], Req)(val, req); break;
			case "last_login": last_login_ = convertParam2!(Time, Req)(val, req); break;
			default: break;
		}
	}
}

public uint id() { return id_; }
private uint id_;

public char[] email() { return email_; }
public void email(char[] val) {__touched__[1] = true; email_ = val;}
private char[] email_;

public char[] username() { return username_; }
public void username(char[] val) {__touched__[2] = true; username_ = val;}
private char[] username_;

public char[] firstname() { return firstname_; }
public void firstname(char[] val) {__touched__[3] = true; firstname_ = val;}
private char[] firstname_;

public char[] lastname() { return lastname_; }
public void lastname(char[] val) {__touched__[4] = true; lastname_ = val;}
private char[] lastname_;

public Time last_login() { return last_login_; }
public void last_login(Time val) {__touched__[5] = true; last_login_ = val;}
private Time last_login_;

}
