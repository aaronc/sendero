module test1;
/*DO NOT EDIT THIS FILE!*/

import sendero.routing.TypeSafeRouter, sendero.http.Response, sendero.http.Request, sendero.routing.IRoute;
import sendero_base.Core, sendero.data.Bind, sendero.vm.bind.Bind, sendero.validation.Validations;



/+@controller+/ class MainCtlr
{
	/+@GET+/
	static Res index()
	{
	
	}

	/+@POST+/
	static Res login(char[] username, char[] password)
	{

	}
	
	/+@GET+/
	static Res logout()
	{
	
	}
	
	/+@POST+/
	static Res signup(char[] firstname, char[] lastname, char[] email,
						char[] pswd, char[] pswdConfirm)
	{
		
	}
	
	/+@POST+/
	static Res resetPswd(char[] email)
	{
	
	}
	
	static IIController getInstance(Req req)
	{
		
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	r.map!(typeof(&MainCtlr.index))(GET,"index", &MainCtlr.index, []);
	r.map!(typeof(&MainCtlr.login))(POST,"login", &MainCtlr.login, []);
	r.map!(typeof(&MainCtlr.logout))(GET,"logout", &MainCtlr.logout, []);
	r.map!(typeof(&MainCtlr.signup))(POST,"signup", &MainCtlr.signup, []);
	r.map!(typeof(&MainCtlr.resetPswd))(POST,"resetPswd", &MainCtlr.resetPswd, []);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}

/+@controller+/ class UserCtlr
{
	/+@POST+/
	Res changePswd(char[] curPswd, char[] newPswd, char[] newPswdConfirm)
	{
	
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	ir.map!(typeof(&UserCtlr.changePswd))(POST,"changePswd", &UserCtlr.changePswd, []);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}

/+@controller+/ class GroupCtlr
{
	/+@GET+/
	static Res create()
	{
	
	}
	
	/+@POST+/
	static Res create()
	{
	
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	r.map!(typeof(&GroupCtlr.create))(GET,"create", &GroupCtlr.create, []);
	r.map!(typeof(&GroupCtlr.create))(POST,"create", &GroupCtlr.create, []);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}


/+@data+/ class User
: IObject, IBindable

{
	/+@required+/ char[] email;
	char[] firstname;
	char[] lastname;

Var opIndex(char[] key)
{
	switch(key)
	{
		case "email":
			return email;
		case "firstname":
			return firstname;
		case "lastname":
			return lastname;
		default:
			return Var();
	}
}
void opIndexAssign(Var val, char[] key) {}
Var opCall(Var[] params, IExecContext ctxt) {}
void toString(IExecContext ctxt, void delegate(char[]) utf8Writer, char[] flags = null) {}
static Binder createBinder(char[][] fieldNames = null)
{
}
static FieldInfo[] reflect()
{
char[] classname = T.stringof;
FieldInfo[] info;
uint n = 0;static if(is(T == class)) {alias BaseTypeTupleOf!(T) BTT;static if(BTT.length) {static if(!is(BTT[0] == Object)) {info ~= ReflectionOf!(BTT[0]).doReflect;n += info.length;}}}}

bool validate()
{
if(!ExistenceValidation!(char[]).validate(email)) fail(ExistenceValidation!(char[]).error);}


}
