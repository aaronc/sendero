module test.senderoxc.test1;
/*DO NOT EDIT THIS FILE!*/

import sendero.routing.Router, sendero.http.Response, sendero.http.Request, sendero.routing.IRoute, sendero.view.View;
import sendero_base.Core, sendero.db.Bind, sendero.vm.bind.Bind, sendero.validation.Validations;



import test.senderoxc.test2;

/+@controller+/ class MainCtlr
{
	/+@GET+/
	static Res index()
	{
	
	}

	/+@POST+/
	static Res login(char[] username, char[] password)
	{

	}
	
	/+@GET+/
	static Res logout()
	{
	
	}
	
	/+@POST+/
	static Res signup(char[] firstname, char[] lastname, char[] email,
						char[] pswd, char[] pswdConfirm)
	{
		
	}
	
	/+@POST+/
	static Res resetPswd(char[] email)
	{
	
	}
	
	static IIController getInstance(Req req)
	{
		
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	r.map!(Res function())(GET,"", &MainCtlr.index, []);
	r.map!(Res function(char[],char[]))(POST,"login", &MainCtlr.login, ["username", "password"]);
	r.map!(Res function())(GET,"logout", &MainCtlr.logout, []);
	r.map!(Res function(char[],char[],char[],char[],char[]))(POST,"signup", &MainCtlr.signup, ["firstname", "lastname", "email", "pswd", "pswdConfirm"]);
	r.map!(Res function(char[]))(POST,"resetPswd", &MainCtlr.resetPswd, ["email"]);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}

/+@controller+/ class UserCtlr
{
	/+@POST+/
	Res changePswd(char[] curPswd, char[] newPswd, char[] newPswdConfirm)
	{
	
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	ir.map!(Res function(char[],char[],char[]))(POST,"changePswd", &UserCtlr.changePswd, ["curPswd", "newPswd", "newPswdConfirm"]);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}

/+@controller+/ class GroupCtlr
{
	/+@GET+/
	static Res create()
	{
	
	}
	
	/+@POST+/
	static Res create()
	{
	
	}

static const TypeSafeRouter!(Res,Req) r, ir;
static this()
{
	r = TypeSafeRouter!(Response,Request)();
	ir = TypeSafeRouter!(Response,Request)();
	r.map!(Res function())(GET,"create", &GroupCtlr.create, []);
	r.map!(Res function())(POST,"create", &GroupCtlr.create, []);
}

static Res route(Req req)
{ return r.route(req); }
Res iroute(Req req)
{ return r.route(req); }

}


/+@data+/ class User
: IObject, IHttpSet

{
	/+@autoPrimaryKey("id")+/;
	/+@required+/ /+@string("email")+/;
	/+@minLength(8)+/ /+@maxLength(40)+/ /+@string("username")+/; 
	/+@string("firstname")+/;
	/+@string("lastname")+/;


Var opIndex(char[] key)
{
	Var res;
	switch(key)
	{
		case "id": bind(var, id()); break;
		case "email": bind(var, email()); break;
		case "username": bind(var, username()); break;
		case "firstname": bind(var, firstname()); break;
		case "lastname": bind(var, lastname()); break;
		default: return Var();
	}
	return res;
}
int opApply (int delegate (inout char[] key, inout Var val) dg) {}
void opIndexAssign(Var val, char[] key) {}
Var opCall(Var[] params, IExecContext ctxt) {}
void toString(IExecContext ctxt, void delegate(char[]) utf8Writer, char[] flags = null) {}


void httpSet(IObject obj, Request req)
{
	foreach(key, val; obj)
	{
		switch(key)
		{
			case "email": email = convertParam2!(string, Req)(val); break;
			case "username": username = convertParam2!(string, Req)(val); break;
			case "firstname": firstname = convertParam2!(string, Req)(val); break;
			case "lastname": lastname = convertParam2!(string, Req)(val); break;
			default: break;
		}
	}
}

static this()
{
	username_MinLengthValidation = new MinLengthValidation(8);
	username_MaxLengthValidation = new MaxLengthValidation(40);
}

private static MinLengthValidation username_MinLengthValidation;
private static MaxLengthValidation username_MaxLengthValidation;

bool validate()
{
	bool succeed = true;

	void fail(char[] field, Error err)	{
		succeed = false;
		errors_.add(field, err)
	}

	if(!ExistenceValidation!(string).validate(email_)) fail("email_", ExistenceValidation!(string).error);
	if(!username_MinLengthValidation.validate(username_)) fail("username_", username_MinLengthValidation.error);
	if(!username_MaxLengthValidation.validate(username_)) fail("username_", username_MaxLengthValidation.error);

	return succeed;
}


mixin SessionAllocate!();

ErrorMap errors()
{
	return errors_;
}
void clearErrors()
{
	errors_.reset;
}
private ErrorMap errors_;

static this()
{
	auto sqlGen = db.getSqlGenerator;
	auto quote = sqlGen.getIdentifierQuoteCharacter; char[] idQuoted = quote ~ "id" ~ quote;
	insertSql = sqlGen.makeInsertSql("User",[]);
	updateSql = sqlGen.makeUpdateSql("WHERE " ~ idQuoted ~ " = ?", "User",[]);
	selectByIDSq = "SELECT " ~ sqlGen.makeFieldList(["id_"]) ~ " FROM User WHERE " ~ idQuoted ~ " = ?");
	deleteSql = "DELETE FROM User WHERE " ~ idQuoted ~ " = ?");
}

const static char[] insertSql, updateSql, selectByIDSql, deleteSql;

public bool save()
{
	if(id_) {
		scope st = db.prepare(updateSql);
		st.execute(, id_);
	}
	else {
		scope st = db.prepare(insertSql);
		st.execute();
		id_ = st.getLastInsertID;
	}
	return true;}

public static User getByID(uint id)
{
	scope st = db.prepare(selectByIDSql);
	st.execute(id_);
	auto res = new User;
	if(st.fetch(res.id_)) return res;
	else return null;
}

public bool destroy()
{
	scope st = db.prepare(deleteSql);
	st.execute(id_);
	return true;
}

public uint id() {return id_;}
private uint id_;

public string email() { return email_;}
public void email(string val) {email_ = val;}
private string email_;

public string username() { return username_;}
public void username(string val) {username_ = val;}
private string username_;

public string firstname() { return firstname_;}
public void firstname(string val) {firstname_ = val;}
private string firstname_;

public string lastname() { return lastname_;}
public void lastname(string val) {lastname_ = val;}
private string lastname_;


}
