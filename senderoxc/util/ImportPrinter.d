module senderoxc.util.ImportPrinter;

import senderoxc.Compiler;

class ImportPrinter
{
	this(SenderoXCompiler mod)
	{
		this.rootMod = mod;
	}
	
	char[][char[]] printedMods;
	SenderoXCompiler rootMod;
	
	void print(void delegate(char[]) pr)
	{
		pr("\n\n");
		pr(`digraph d{`);
		pr("\n\t");
		pr(`node [fontname=Helvetica,style=filled];`);
		pr("\n\t");
        pr(`graph [fontname=Helvetica,label="generated by senderoxc"];`);
        pr("\n");
        printMod(rootMod, pr);
        pr(`}`);
	}
	
	void printMod(SenderoXCompiler mod, void delegate(char[]) pr)
	{
		foreach(i; mod.imports)
		{
			pr(`"`);
			pr(mod.modname);
			pr(`" -> "`);
			pr(i.modname);
			pr(`";`);
			pr("\n");
		}
		
		printedMods[mod.modname] = mod.modname;
		
		foreach(i; mod.imports)
		{
			auto pI = i.modname in printedMods;
			if(pI) continue;
			printMod(i, pr);
		}
	}
}

version(SenderoXCImportPrinter)
{
	import senderoxc.Config;
	import sendero.core.Config;
	import tango.io.Stdout;
	import tango.io.File;
	
	int main(char[][] args)
	{
		if(args.length > 1) {
			SenderoConfig.load(args[1]);
			SenderoXCConfig.load(args[1]);
			auto compiler = SenderoXCompiler.create(SenderoXCConfig().modname);
			auto ip = new ImportPrinter(compiler);
			char[] res;
			ip.print((char[] val){res ~= val;});
			Stdout(res);
			auto f = new File("senderoimp.dump");
			f.write(res);
		}
		return 0;
	}
}