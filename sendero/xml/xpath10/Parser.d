// Written in the D programming language

/*
 *  This file has been automatically generated by APaGeD v0.4.2 beta - Attributed Parser Generator for D.
 *
 *  Sections generated from custom input are marked as "generated code" and
 *  are subject to the terms and conditions stated in one of these sections.
 *  The remaining sections are part of the APaGeD package and subject
 *  to the terms and conditions of the corresponding license.
 *
 *  Attributed Parser Generator for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0
 */

// generated code start

#line 2 "Parser.apd"

module sendero.xml.xpath10.Parser;

import sendero.xml.xpath10.Expression;
import sendero_base.xml.XmlNode;

debug import tango.io.Stdout;
import Integer = tango.text.convert.Integer;
import Float = tango.text.convert.Float;

public import sendero_base.Core;
import sendero_base.Set;
import sendero.vm.Expression;

debug(SenderoViewDebug) debug = SenderoXPathDebug;
debug(SenderoXPathDebug) {
	debug = SenderoVMDebug;
	
	import sendero.Debug;
	
	Logger log;
	static this()
	{
		log = Log.lookup("debug.SenderoXPath");
	}
}

version(TestApaged)
{
	import sendero.util.LocalText;

    void main(string[] args)
    {
        if ( args.length < 2 )
            throw new Exception("Usage: arithmetic <expression>");
        SyntaxTree* root;
        if ( parse("", args[1], root, true) ) {
            IXPathExpression value;
            root.Expr(value);
            debug root.print;
			auto ctxt = new ExecutionContext;
			auto res = value.exec(ctxt);
			auto text = Message.renderParam(ctxt, res);
            Stdout.format("{} = {}\n", args[1], text);
        }
        else
        {
            Stdout.format("Invalid expression: {}\n", args[1]);
        }
    }
}
// generated code end

version(Tango)
{
  
}
else
{
    import std.string;
    debug import std.stdio;
}

/**************************************************************************************************
    Semantic Analyzer
**************************************************************************************************/

class SemanticException : Exception
{
    this(string msg)
    {
        super(msg);
    }
}

struct SyntaxTree
{
    uint            _ST_rule,
                    _ST_line_number,
                    _ST_column_number;
    debug
    {
        string          _ST_node_name,
                        _ST_match,
                        _ST_match_ws;
        SyntaxTree*[]   _ST_children;
    }
    else
    {
        union
        {
            struct {
                string      _ST_match,
                            _ST_match_ws;
            }
            SyntaxTree*[]   _ST_children;
        }
    }

    debug
    {
        SyntaxTree* parent;

        string indent()
        {
            string str;
            for ( SyntaxTree* n = parent; n !is null; n = n.parent )
                str ~= "  ";
            return str;
        }

        void print(string indent = "")
        {
            version(Tango)
                Stdout.format("{}{}{}", indent, _ST_node_name, _ST_rule);
            else
                writef("%s%s%d", indent, _ST_node_name, _ST_rule);
            if ( _ST_children.length == 0 )
            {
                version(Tango)
                    Stdout.formatln(" (\"{}\")", _ST_match);
                else
                    writefln(" (\"%s\")", _ST_match);
            }
            else
            {
                version(Tango)
                    Stdout.newline;
                else
                    writefln;
            }
            foreach ( c; _ST_children )
                c.print(indent~"  ");
        }
    }

    void opCatAssign(SyntaxTree* n)
    {
        _ST_children ~= n;
    }

    // augmented semantic code
// generated code start
    alias _S_Expr Expr;
void _S_Expr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 0:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) OrExpr = &_ST_children[0]._S_OrExpr;

#line 64 "Parser.apd"

		OrExpr(expr, ctxt);
        break;
    case 1:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[0]._S_Expr;
        void delegate() ExprTerminator = &_ST_children[1]._S_ExprTerminator;

#line 69 "Parser.apd"

		Expr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_ExprTerminator()
{

    switch ( _ST_rule )
    {
    case 2:
        debug assert(_ST_children.length == 0);
        break;

    default:
        assert(0);
    }
}
void _S_OrExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 3:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AndExpr = &_ST_children[0]._S_AndExpr;

#line 82 "Parser.apd"

		AndExpr(expr, ctxt);
        break;
    case 4:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) OrExpr = &_ST_children[0]._S_OrExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AndExpr = &_ST_children[1]._S_AndExpr;

#line 87 "Parser.apd"

		IXPathExpression x, y;
		OrExpr(x, ctxt); AndExpr(y, ctxt);
		expr = new LogicalOp!("||", XPathContext)(x, y);
        break;

    default:
        assert(0);
    }
}
void _S_AndExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 5:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) EqualityExpr = &_ST_children[0]._S_EqualityExpr;

#line 97 "Parser.apd"

		EqualityExpr(expr, ctxt);
        break;
    case 6:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AndExpr = &_ST_children[0]._S_AndExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) EqualityExpr = &_ST_children[1]._S_EqualityExpr;

#line 102 "Parser.apd"

		IXPathExpression x, y;
		AndExpr(x, ctxt); EqualityExpr(y, ctxt);
		expr = new LogicalOp!("&&", XPathContext)(x, y);
        break;

    default:
        assert(0);
    }
}
void _S_EqualityExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 7:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[0]._S_RelationalExpr;

#line 112 "Parser.apd"

		RelationalExpr(expr, ctxt);
        break;
    case 8:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) EqualityExpr = &_ST_children[0]._S_EqualityExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[1]._S_RelationalExpr;

#line 117 "Parser.apd"

		IXPathExpression x, y;
		EqualityExpr(x, ctxt); RelationalExpr(y, ctxt);
		expr = new EqOp!("==", XPathContext)(x, y);
        break;
    case 9:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) EqualityExpr = &_ST_children[0]._S_EqualityExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[1]._S_RelationalExpr;

#line 124 "Parser.apd"

		IXPathExpression x, y;
		EqualityExpr(x, ctxt); RelationalExpr(y, ctxt);
		expr = new EqOp!("!=", XPathContext)(x, y);
        break;

    default:
        assert(0);
    }
}
void _S_RelationalExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 10:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[0]._S_AdditiveExpr;

#line 134 "Parser.apd"

		AdditiveExpr(expr, ctxt);
        break;
    case 11:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[0]._S_RelationalExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[1]._S_AdditiveExpr;

#line 139 "Parser.apd"

		IXPathExpression x, y;
		RelationalExpr(x, ctxt); AdditiveExpr(y, ctxt);
		expr = new CmpOp!("<", XPathContext)(x, y);
        break;
    case 12:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[0]._S_RelationalExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[1]._S_AdditiveExpr;

#line 146 "Parser.apd"

		IXPathExpression x, y;
		RelationalExpr(x, ctxt); AdditiveExpr(y, ctxt);
		expr = new CmpOp!(">", XPathContext)(x, y);
        break;
    case 13:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[0]._S_RelationalExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[1]._S_AdditiveExpr;

#line 153 "Parser.apd"

		IXPathExpression x, y;
		RelationalExpr(x, ctxt); AdditiveExpr(y, ctxt);
		expr = new CmpOp!("<=", XPathContext)(x, y);
        break;
    case 14:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) RelationalExpr = &_ST_children[0]._S_RelationalExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[1]._S_AdditiveExpr;

#line 160 "Parser.apd"

		IXPathExpression x, y;
		RelationalExpr(x, ctxt); AdditiveExpr(y, ctxt);
		expr = new CmpOp!(">=", XPathContext)(x, y);
        break;

    default:
        assert(0);
    }
}
void _S_AdditiveExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 15:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[0]._S_AdditiveExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[1]._S_MulExpr;

#line 170 "Parser.apd"

    	IXPathExpression x, y;
		AdditiveExpr(x, ctxt); MulExpr(y, ctxt);
		expr = new BinaryOp!("+", XPathContext)(x, y);
        break;
    case 16:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) AdditiveExpr = &_ST_children[0]._S_AdditiveExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[1]._S_MulExpr;

#line 177 "Parser.apd"

    	IXPathExpression x, y;
		AdditiveExpr(x, ctxt); MulExpr(y, ctxt);
		expr = new BinaryOp!("-", XPathContext)(x, y);
        break;
    case 17:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[0]._S_MulExpr;

#line 184 "Parser.apd"
 MulExpr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_MulExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 18:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[0]._S_MulExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnaryExpr = &_ST_children[1]._S_UnaryExpr;

#line 190 "Parser.apd"

    	IXPathExpression x, y;
		MulExpr(x, ctxt); UnaryExpr(y, ctxt);
		expr = new BinaryOp!("*", XPathContext)(x, y);
        break;
    case 19:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[0]._S_MulExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnaryExpr = &_ST_children[1]._S_UnaryExpr;

#line 197 "Parser.apd"

    	IXPathExpression x, y;
		MulExpr(x, ctxt); UnaryExpr(y, ctxt);
		expr = new BinaryOp!("/", XPathContext)(x, y);
        break;
    case 20:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) MulExpr = &_ST_children[0]._S_MulExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnaryExpr = &_ST_children[1]._S_UnaryExpr;

#line 204 "Parser.apd"

    	IXPathExpression x, y;
		MulExpr(x, ctxt); UnaryExpr(y, ctxt);
		expr = new BinaryOp!("%", XPathContext)(x, y);
        break;
    case 21:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnaryExpr = &_ST_children[0]._S_UnaryExpr;

#line 211 "Parser.apd"
 UnaryExpr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_UnaryExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 22:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnaryExpr = &_ST_children[0]._S_UnaryExpr;

#line 218 "Parser.apd"

		IXPathExpression e;
        UnaryExpr(e, ctxt);
        expr = new Negative!(XPathContext)(e);
        break;
    case 23:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UnionExpr = &_ST_children[0]._S_UnionExpr;

#line 225 "Parser.apd"
 UnionExpr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_UnionExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 24:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) PathExpr = &_ST_children[0]._S_PathExpr;

#line 231 "Parser.apd"

		PathExpr(expr, ctxt);
        break;
    case 25:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) UExpr = &_ST_children[0]._S_UnionExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) PathExpr = &_ST_children[1]._S_PathExpr;

#line 236 "Parser.apd"

		IXPathExpression expr1, expr2;
		UExpr(expr1, ctxt);
		PathExpr(expr2, ctxt);

		expr = new UnionExpr(expr1, expr2);
        break;

    default:
        assert(0);
    }
}
void _S_PathExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 26:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) LocationPath = &_ST_children[0]._S_LocationPath;

#line 248 "Parser.apd"

		IStep step;
		LocationPath(step, ctxt);
		expr = new XPathExpr!(false)(step);
        break;
    case 27:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) FilterExpr = &_ST_children[0]._S_FilterExpr;

#line 255 "Parser.apd"

		FilterExpr(expr, ctxt);
        break;
    case 28:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) FilterExpr = &_ST_children[0]._S_FilterExpr;
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[1]._S_RelativeLocationPath;

#line 260 "Parser.apd"

		IXPathExpression e;
		IStep step;
		
		FilterExpr(e, ctxt);
		RelativeLocationPath(step, ctxt);
		
		expr = new XPathExpr!(true)(step, e);
        break;
    case 29:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) FilterExpr = &_ST_children[0]._S_FilterExpr;
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[1]._S_RelativeLocationPath;

#line 272 "Parser.apd"

		IXPathExpression e;
		IStep step, step2;
		
		FilterExpr(e, ctxt);
		RelativeLocationPath(step2, ctxt);
		
		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		step.setNextStep(step2);
		expr = new XPathExpr!(true)(step, e);
		//expr = new FunctionCall( &(new XPathExpressionFn!(true)(step, e)).exec, null );
	
		/+IXPathExpression e;
		IStep step, step2;
		
		FilterExpr(e);
		RelativeLocationPath(step2);
		
		expr.type = ExpressionT.FuncCall;
		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		step.setNextStep(step2);
		expr.func.func = new XPathExpressionFn!(true)(step);
		expr.func.params ~= e;+/
        break;

    default:
        assert(0);
    }
}
void _S_FilterExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 30:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) PrimaryExpr = &_ST_children[0]._S_PrimaryExpr;

#line 301 "Parser.apd"

		PrimaryExpr(expr, ctxt);
        break;
    case 31:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) FilterExpr = &_ST_children[0]._S_FilterExpr;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Predicate = &_ST_children[1]._S_Predicate;

#line 306 "Parser.apd"

		debug assert(false, "TODO");
        break;

    default:
        assert(0);
    }
}
void _S_Predicate(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 32:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[0]._S_Expr;

#line 315 "Parser.apd"

		Expr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_PredicateList(inout PredicateTest[] predicates, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 33:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Predicate = &_ST_children[0]._S_Predicate;
        void delegate(inout PredicateTest[] predicates, XPathContext ctxt) PredicateList = &_ST_children[1]._S_PredicateList;

#line 323 "Parser.apd"

		IXPathExpression expr;
		Predicate(expr, ctxt);
		auto pred = new PredicateTest(expr);
		predicates ~= pred;
		PredicateTest[] plist;
		PredicateList(plist, ctxt);
		predicates ~= plist;
        break;
    case 34:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Predicate = &_ST_children[0]._S_Predicate;

#line 335 "Parser.apd"

		IXPathExpression expr;
		Predicate(expr, ctxt);
		auto pred = new PredicateTest(expr);
		predicates ~= pred;
        break;
    case 35:
        debug assert(_ST_children.length == 0);
        break;

    default:
        assert(0);
    }
}
void _S_LocationPath(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 36:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[0]._S_RelativeLocationPath;

#line 348 "Parser.apd"

		RelativeLocationPath(step, ctxt);
        break;
    case 37:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) AbsoluteLocationPath = &_ST_children[0]._S_AbsoluteLocationPath;

#line 353 "Parser.apd"

		AbsoluteLocationPath(step, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_AbsoluteLocationPath(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 38:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[0]._S_RelativeLocationPath;

#line 361 "Parser.apd"

		RelativeLocationPath(step, ctxt);
        break;
    case 39:
        debug assert(_ST_children.length == 0);

#line 366 "Parser.apd"

		//step = new XPathStep!(Axis.self);
		//debug assert(false, "TODO");
		new XPathStep(&constructNodeSetViewer!(SelfAxisViewer));
        break;
    case 40:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) AbbreviatedAbsoluteLocationPath = &_ST_children[0]._S_AbbreviatedAbsoluteLocationPath;

#line 373 "Parser.apd"

		AbbreviatedAbsoluteLocationPath(step, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_AbbreviatedAbsoluteLocationPath(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 41:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[0]._S_RelativeLocationPath;

#line 381 "Parser.apd"

		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		IStep step2;
		RelativeLocationPath(step2, ctxt);
		step.setNextStep = step2;
        break;

    default:
        assert(0);
    }
}
void _S_RelativeLocationPath(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 42:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) Step = &_ST_children[0]._S_Step;

#line 392 "Parser.apd"

		Step(step, ctxt);
        break;
    case 43:
        debug assert(_ST_children.length == 2);
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[0]._S_RelativeLocationPath;
        void delegate(inout IStep step, XPathContext ctxt) Step = &_ST_children[1]._S_Step;

#line 397 "Parser.apd"

		IStep step2;
		RelativeLocationPath(step, ctxt);
		Step(step2, ctxt);
		step.setNextStep = step2;
        break;
    case 44:
        debug assert(_ST_children.length == 1);
        void delegate(inout IStep step, XPathContext ctxt) AbbreviatedRelativeLocationPath = &_ST_children[0]._S_AbbreviatedRelativeLocationPath;

#line 405 "Parser.apd"

		AbbreviatedRelativeLocationPath(step, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_AbbreviatedRelativeLocationPath(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 45:
        debug assert(_ST_children.length == 2);
        void delegate(inout IStep step, XPathContext ctxt) RelativeLocationPath = &_ST_children[0]._S_RelativeLocationPath;
        void delegate(inout IStep step, XPathContext ctxt) Step = &_ST_children[1]._S_Step;

#line 413 "Parser.apd"

		IStep step2, step3;
		RelativeLocationPath(step, ctxt);
		step2 = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		Step(step3, ctxt);
		step2.setNextStep = step3;
		step.setNextStep = step2;
        break;

    default:
        assert(0);
    }
}
void _S_Step(inout IStep step, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 46:
        debug assert(_ST_children.length == 3);
        void delegate(out Axis axis) AxisSpecifier = &_ST_children[0]._S_AxisSpecifier;
        void delegate(inout ITest test, XPathContext ctxt) NodeTest = &_ST_children[1]._S_NodeTest;
        void delegate(inout PredicateTest[] predicates, XPathContext ctxt) PredicateList = &_ST_children[2]._S_PredicateList;

#line 426 "Parser.apd"

		Axis axis;
		AxisSpecifier(axis);
		ITest test;
		PredicateTest[] predicates;
		NodeTest(test, ctxt);
		PredicateList(predicates, ctxt);		
		
		switch(axis)
		{
		case Axis.ancestor:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer), test, predicates);
			break;
		case Axis.ancestor_or_self:
			step = new XPathStep(&constructNodeSetViewer!(AncestorOrSelfAxisViewer), test, predicates);
			break;
		case Axis.attribute:
			step = new XPathStep(&constructNodeSetViewer!(AttributeAxisViewer), test, predicates);
			break;
		case Axis.child:
			step = new XPathStep(&constructNodeSetViewer!(ChildAxisViewer), test, predicates);
			break;
		case Axis.descendant:
			step = new XPathStep(&constructNodeSetViewer!(DescendantAxisViewer), test, predicates);
			break;
		case Axis.descendant_or_self:
			step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer), test, predicates);
			break;
		case Axis.following:
			step = new XPathStep(&constructNodeSetViewer!(FollowingAxisViewer), test, predicates);
			break;
		case Axis.following_sibling:
			step = new XPathStep(&constructNodeSetViewer!(FollowingSiblingAxisViewer), test, predicates);
			break;
		case Axis.namespace:
			debug assert(false, "namespace axis deprecated");
			break;
		case Axis.parent:
			step = new XPathStep(&constructNodeSetViewer!(ParentAxisViewer), test, predicates);
			break;
		case Axis.preceding:
			step = new XPathStep(&constructNodeSetViewer!(PrecedingAxisViewer), test, predicates);
			break;
		case Axis.preceding_sibling:
			step = new XPathStep(&constructNodeSetViewer!(PrecedingSiblingAxisViewer), test, predicates);
			break;
		case Axis.self:
			step = new XPathStep(&constructNodeSetViewer!(SelfAxisViewer), test, predicates);
			break;
		default:
			debug assert(false);
		}
        break;
    case 47:
        debug assert(_ST_children.length == 1);
        void delegate(out Axis axis, XPathContext ctxt) AbbreviatedStep = &_ST_children[0]._S_AbbreviatedStep;

#line 480 "Parser.apd"

		Axis axis;
		AbbreviatedStep(axis, ctxt);
		switch(axis)
		{
		case Axis.parent:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer));
			break;
		case Axis.self:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer));
			break;
		default:
			debug assert(false);
		}
        break;

    default:
        assert(0);
    }
}
void _S_AbbreviatedStep(out Axis axis, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 48:
        debug assert(_ST_children.length == 0);

#line 500 "Parser.apd"

		axis = Axis.self;
        break;
    case 49:
        debug assert(_ST_children.length == 0);

#line 504 "Parser.apd"

		axis = Axis.parent;
        break;

    default:
        assert(0);
    }
}
void _S_AxisSpecifier(out Axis axis)
{

    switch ( _ST_rule )
    {
    case 50:
        debug assert(_ST_children.length == 1);
        void delegate(out Axis axis) AxisName = &_ST_children[0]._S_AxisName;

#line 512 "Parser.apd"

		AxisName(axis);
        break;
    case 51:
        debug assert(_ST_children.length == 1);
        void delegate(out bool attr) AbbreviatedAxisSpecifier = &_ST_children[0]._S_AbbreviatedAxisSpecifier;

#line 517 "Parser.apd"

		bool attr;
		AbbreviatedAxisSpecifier(attr);
		if(attr) axis = Axis.attribute;
		else axis = Axis.child;
        break;

    default:
        assert(0);
    }
}
void _S_AxisName(out Axis axis)
{

    switch ( _ST_rule )
    {
    case 52:
        debug assert(_ST_children.length == 0);

#line 527 "Parser.apd"
 axis = Axis.ancestor;
        break;
    case 53:
        debug assert(_ST_children.length == 0);

#line 528 "Parser.apd"
 axis = Axis.ancestor_or_self;
        break;
    case 54:
        debug assert(_ST_children.length == 0);

#line 529 "Parser.apd"
 axis = Axis.attribute;
        break;
    case 55:
        debug assert(_ST_children.length == 0);

#line 530 "Parser.apd"
 axis = Axis.child;
        break;
    case 56:
        debug assert(_ST_children.length == 0);

#line 531 "Parser.apd"
 axis = Axis.descendant;
        break;
    case 57:
        debug assert(_ST_children.length == 0);

#line 532 "Parser.apd"
 axis = Axis.descendant_or_self;
        break;
    case 58:
        debug assert(_ST_children.length == 0);

#line 533 "Parser.apd"
 axis = Axis.following;
        break;
    case 59:
        debug assert(_ST_children.length == 0);

#line 534 "Parser.apd"
 axis = Axis.following_sibling;
        break;
    case 60:
        debug assert(_ST_children.length == 0);

#line 535 "Parser.apd"
 axis = Axis.namespace;
        break;
    case 61:
        debug assert(_ST_children.length == 0);

#line 536 "Parser.apd"
 axis = Axis.parent;
        break;
    case 62:
        debug assert(_ST_children.length == 0);

#line 537 "Parser.apd"
 axis = Axis.preceding;
        break;
    case 63:
        debug assert(_ST_children.length == 0);

#line 538 "Parser.apd"
 axis = Axis.preceding_sibling;
        break;
    case 64:
        debug assert(_ST_children.length == 0);

#line 539 "Parser.apd"
 axis = Axis.self;
        break;

    default:
        assert(0);
    }
}
void _S_AbbreviatedAxisSpecifier(out bool attr)
{

    switch ( _ST_rule )
    {
    case 65:
        debug assert(_ST_children.length == 0);

#line 545 "Parser.apd"

		attr = true;
        break;
    case 66:
        debug assert(_ST_children.length == 0);

#line 550 "Parser.apd"

		attr = false;
        break;

    default:
        assert(0);
    }
}
void _S_NodeTest(inout ITest test, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 67:
        debug assert(_ST_children.length == 1);
        void delegate(inout ITest test) NameTest = &_ST_children[0]._S_NameTest;

#line 558 "Parser.apd"

		NameTest(test);
        break;
    case 68:
        debug assert(_ST_children.length == 1);
        void delegate(inout ITest test) NodeType = &_ST_children[0]._S_NodeType;

#line 563 "Parser.apd"

		NodeType(test);
        break;
    case 69:
        debug assert(_ST_children.length == 1);
        void delegate(char[] value) Literal = &_ST_children[0]._S_Literal;

#line 568 "Parser.apd"

		auto piTest = new PIKindTest;
		Literal(piTest.literal);
		test = piTest;
        break;

    default:
        assert(0);
    }
}
void _S_NodeType(inout ITest test)
{

    switch ( _ST_rule )
    {
    case 70:
        debug assert(_ST_children.length == 0);

#line 578 "Parser.apd"

		test = new CommentKindTest;
        break;
    case 71:
        debug assert(_ST_children.length == 0);

#line 583 "Parser.apd"

		test = new TextKindTest;
        break;
    case 72:
        debug assert(_ST_children.length == 0);

#line 588 "Parser.apd"

		test = new PIKindTest;
        break;
    case 73:
        debug assert(_ST_children.length == 0);

#line 593 "Parser.apd"

		test = new NodeKindTest;
        break;

    default:
        assert(0);
    }
}
void _S_Literal(char[] value)
{

    switch ( _ST_rule )
    {
    case 74:
        debug assert(_ST_children.length == 0);

#line 602 "Parser.apd"

		value = _ST_match[1 .. $-1];
        break;
    case 75:
        debug assert(_ST_children.length == 0);

#line 607 "Parser.apd"

		value = _ST_match[1 .. $-1];
        break;

    default:
        assert(0);
    }
}
void _S_NameTest(inout ITest test)
{

    switch ( _ST_rule )
    {
    case 76:
        debug assert(_ST_children.length == 0);

#line 615 "Parser.apd"

		test = new WildcardTest;
        break;
    case 77:
        debug assert(_ST_children.length == 1);
        void delegate(out char[] value) NCName = &_ST_children[0]._S_NCName;

#line 620 "Parser.apd"

		char[] prefix;
		NCName(prefix);
		test = new WildcardPrefixTest(prefix);
        break;
    case 78:
        debug assert(_ST_children.length == 1);
        void delegate(inout char[][] path) QName = &_ST_children[0]._S_QName;

#line 627 "Parser.apd"

		char[][] path;
		QName(path);
		debug assert(path.length);
		if(path.length == 1) {
			test = new QNameTest(null, path[0]);
		}
		else if(path.length == 2) {
			test = new QNameTest(path[0], path[1]);
		}
        break;

    default:
        assert(0);
    }
}
void _S_PrimaryExpr(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 79:
        debug assert(_ST_children.length == 0);

#line 643 "Parser.apd"

    	long val = Integer.atoi(_ST_match);
		Var v; set(v, val);
		expr = new Literal!(XPathContext)(v);
        break;
    case 80:
        debug assert(_ST_children.length == 0);

#line 650 "Parser.apd"

    	double val = Float.parse(_ST_match);
		Var v; set(v, val);
		expr = new Literal!(XPathContext)(v);
        break;
    case 81:
        debug assert(_ST_children.length == 1);
        void delegate(char[] value) Lit = &_ST_children[0]._S_Literal;

#line 657 "Parser.apd"

		char[] val;	Lit(val);
		Var v; set(v, val);
		expr = new Literal!(XPathContext)(v);
        break;
    case 82:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) FuncCall = &_ST_children[0]._S_FuncCall;

#line 664 "Parser.apd"

		FuncCall(expr, ctxt);
        break;
    case 83:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) VarRef = &_ST_children[0]._S_VarRef;

#line 669 "Parser.apd"

		VarRef(expr, ctxt);
        break;
    case 84:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[0]._S_Expr;

#line 674 "Parser.apd"
 Expr(expr, ctxt);
        break;

    default:
        assert(0);
    }
}
void _S_VarRef(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 85:
        debug assert(_ST_children.length == 1);
        void delegate(ref IXPathExpression[] path, XPathContext ctxt) VarAcc = &_ST_children[0]._S_VarAccess;

#line 686 "Parser.apd"

		IXPathExpression[] path;
		VarAcc(path, ctxt);
		expr = new VarAccess!(XPathContext)(path);
		/+expr.type = ExpressionT.Var;
		Path(expr.var);+/
        break;

    default:
        assert(0);
    }
}
void _S_FuncCall(inout IXPathExpression expr, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 86:
        debug assert(_ST_children.length == 2);
        void delegate(out char[] value) NCName = &_ST_children[0]._S_NCName;
        void delegate(inout IXPathExpression[] args, XPathContext ctxt) ExprList = &_ST_children[1]._S_ExprList;

#line 721 "Parser.apd"

		//char[][] path;
		//QName(path);
		char[] name;
		NCName(name);
		
		switch(name)
		{
		case "last":
			expr = new LastExpr;
			break;
		case "position":
			expr = new PositionExpr;
			break;
		case "true":
			Var v; set(v, true);
			expr = new Literal!(XPathContext)(v);
			break;
		case "false":
			Var v; set(v, false);
			expr = new Literal!(XPathContext)(v);
			break;
		default:
			IXPathExpression[] args;
			ExprList(args, ctxt);
			
			/+assert(path.length);
			auto name = path[0];
			if(path.length > 1) name ~= ':' ~ path[1];+/
			
			debug(SenderoXPathDebug) {
				log.trace("NCName '(' ExprList ')' : name = {}, args.length = ", name, args.length);
				foreach(arg; args)
				{
					log.trace("NCName '(' ExprList ')' arg : {}", arg.toString);
				}
			}
			
			auto fn = ctxt.getFunction(name);
			if(fn !is null)	{
				debug(SenderoXPathDebug) log.trace("FunctionCall:{}", name);
				expr = new FunctionCall!(XPathContext)(fn, args);
			}
			else {
				debug(SenderoXPathDebug) log.trace("LateBindingFunctionCall:{}", name);
				expr = new LateBindingFunctionCall!(XPathContext)(name, args);
			}
			break;
		}
        break;

    default:
        assert(0);
    }
}
void _S_ExprList(inout IXPathExpression[] args, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 87:
        debug assert(_ST_children.length == 2);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[0]._S_Expr;
        void delegate(inout IXPathExpression[] args, XPathContext ctxt) ExprList = &_ST_children[1]._S_ExprList;

#line 778 "Parser.apd"

		IXPathExpression expr;
		IXPathExpression exprList[];
		Expr(expr, ctxt);
		ExprList(exprList, ctxt);
		args ~= expr;
		args ~= exprList;
        break;
    case 88:
        debug assert(_ST_children.length == 1);
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[0]._S_Expr;

#line 788 "Parser.apd"

		IXPathExpression expr;
		Expr(expr, ctxt);
		args ~= expr;
        break;
    case 89:
        debug assert(_ST_children.length == 0);
        break;

    default:
        assert(0);
    }
}
void _S_QName(inout char[][] path)
{

    switch ( _ST_rule )
    {
    case 90:
        debug assert(_ST_children.length == 1);
        void delegate(out char[] value) NCName = &_ST_children[0]._S_NCName;

#line 800 "Parser.apd"

		char[] localname;
		NCName(localname);
		path ~= localname;
        break;
    case 91:
        debug assert(_ST_children.length == 2);
        void delegate(out char[] value) NCName = &_ST_children[0]._S_NCName;
        void delegate(out char[] value) NCName2 = &_ST_children[1]._S_NCName;

#line 807 "Parser.apd"

		char[] prefix, localname;
		NCName(prefix);
		NCName2(localname);
		path ~= prefix;
		path ~= localname;
        break;

    default:
        assert(0);
    }
}
void _S_NCName(out char[] value)
{

    switch ( _ST_rule )
    {
    case 92:
        debug assert(_ST_children.length == 0);

#line 836 "Parser.apd"

		value = _ST_match;
        break;

    default:
        assert(0);
    }
}
void _S_VarAccess(ref IXPathExpression[] path, XPathContext ctxt)
{

    switch ( _ST_rule )
    {
    case 93:
        debug assert(_ST_children.length == 2);
        void delegate(ref IXPathExpression[] path, XPathContext ctxt) VarAccess = &_ST_children[0]._S_VarAccess;
        void delegate(out char[] value) NCName = &_ST_children[1]._S_NCName;

#line 845 "Parser.apd"

		VarAccess(path, ctxt);
		char[] name; NCName(name);
		Var v; set(v, name);
		path ~= new Literal!(XPathContext)(v);
        break;
    case 94:
        debug assert(_ST_children.length == 2);
        void delegate(ref IXPathExpression[] path, XPathContext ctxt) VarAccess = &_ST_children[0]._S_VarAccess;
        void delegate(inout IXPathExpression expr, XPathContext ctxt) Expr = &_ST_children[1]._S_Expr;

#line 853 "Parser.apd"

		VarAccess(path, ctxt);
		IXPathExpression expr;
		Expr(expr, ctxt);
		path ~= expr;
        break;
    case 95:
        debug assert(_ST_children.length == 1);
        void delegate(out char[] value) NCName = &_ST_children[0]._S_NCName;

#line 861 "Parser.apd"

		char[] name; NCName(name);
		Var v; set(v, name);
		path ~= new Literal!(XPathContext)(v);
        break;

    default:
        assert(0);
    }
}

// generated code end
}

#line 1492 "Parser.d"
// Written in the D programming language

/*
 *  This file has been automatically generated by APaGeD v0.4.2 beta - Attributed Parser Generator for D.
 *
 *  Sections generated from custom input are marked as "generated code" and
 *  are subject to the terms and conditions stated in one of these sections.
 *  The remaining sections are part of the APaGeD package and subject
 *  to the terms and conditions of the corresponding license.
 *
 *  Attributed Parser Generator for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0
 */

/**************************************************************************************************
    Lexer
**************************************************************************************************/

version(Tango)
// the following block is stolen from phobos.
// the copyright notice applies for this block only.
{
/*
 *  Copyright (C) 2003-2004 by Digital Mars, www.digitalmars.com
 *  Written by Walter Bright
 *
 *  This software is provided 'as-is', without any express or implied
 *  warranty. In no event will the authors be held liable for any damages
 *  arising from the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  o  The origin of this software must not be misrepresented; you must not
 *     claim that you wrote the original software. If you use this software
 *     in a product, an acknowledgment in the product documentation would be
 *     appreciated but is not required.
 *  o  Altered source versions must be plainly marked as such, and must not
 *     be misrepresented as being the original software.
 *  o  This notice may not be removed or altered from any source
 *     distribution.
 */

bool isValidDchar(dchar c)
{
    /* Note: FFFE and FFFF are specifically permitted by the
     * Unicode standard for application internal use, but are not
     * allowed for interchange.
     * (thanks to Arcane Jill)
     */

    return c < 0xD800 ||
	(c > 0xDFFF && c <= 0x10FFFF /*&& c != 0xFFFE && c != 0xFFFF*/);
}

/***************
 * Decodes and returns character starting at s[idx]. idx is advanced past the
 * decoded character. If the character is not well formed, a UtfException is
 * thrown and idx remains unchanged.
 */

dchar decode(in char[] s, inout size_t idx)
    {
	size_t len = s.length;
	dchar V;
	size_t i = idx;
	char u = s[i];

	if (u & 0x80)
	{   uint n;
	    char u2;

	    /* The following encodings are valid, except for the 5 and 6 byte
	     * combinations:
	     *	0xxxxxxx
	     *	110xxxxx 10xxxxxx
	     *	1110xxxx 10xxxxxx 10xxxxxx
	     *	11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	     *	111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
	     *	1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
	     */
	    for (n = 1; ; n++)
	    {
		if (n > 4)
		    goto Lerr;		// only do the first 4 of 6 encodings
		if (((u << n) & 0x80) == 0)
		{
		    if (n == 1)
			goto Lerr;
		    break;
		}
	    }

	    // Pick off (7 - n) significant bits of B from first byte of octet
	    V = cast(dchar)(u & ((1 << (7 - n)) - 1));

	    if (i + (n - 1) >= len)
		goto Lerr;			// off end of string

	    /* The following combinations are overlong, and illegal:
	     *	1100000x (10xxxxxx)
	     *	11100000 100xxxxx (10xxxxxx)
	     *	11110000 1000xxxx (10xxxxxx 10xxxxxx)
	     *	11111000 10000xxx (10xxxxxx 10xxxxxx 10xxxxxx)
	     *	11111100 100000xx (10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx)
	     */
	    u2 = s[i + 1];
	    if ((u & 0xFE) == 0xC0 ||
		(u == 0xE0 && (u2 & 0xE0) == 0x80) ||
		(u == 0xF0 && (u2 & 0xF0) == 0x80) ||
		(u == 0xF8 && (u2 & 0xF8) == 0x80) ||
		(u == 0xFC && (u2 & 0xFC) == 0x80))
		goto Lerr;			// overlong combination

	    for (uint j = 1; j != n; j++)
	    {
		u = s[i + j];
		if ((u & 0xC0) != 0x80)
		    goto Lerr;			// trailing bytes are 10xxxxxx
		V = (V << 6) | (u & 0x3F);
	    }
	    if (!isValidDchar(V))
		goto Lerr;
	    i += n;
	}
	else
	{
	    V = cast(dchar) u;
	    i++;
	}

	idx = i;
	return V;

      Lerr:
	throw new Exception("4invalid UTF-8 sequence");
    }
}
else
{
    import std.utf;
}

// lexer code
// generated code start
// ((?[,}])|(?or)|(?and)|(?=)|(?!=)|(?\<)|(?\>)|(?\<=)|(?\>=)|(?\+)|(?\-)|(?\*)|(?div)|(?mod)|(?\|)|(?/)|(?//)|(?\[)|(?\])|(?\.)|(?\.\.)|(?ancestor::)|(?ancestor\-or\-self)|(?attribute::)|(?child::)|(?descendant::)|(?descendant\-or\-self)|(?following::)|(?following\-sibling)|(?namespace::)|(?parent::)|(?preceding::)|(?preceding\-sibling)|(?self::)|(?@)|(?\()|(?\))|(?processing\-instruction)|(?comment)|(?text)|(?node)|(?"[^"]*")|(?'[^']*')|(?:\*)|(?[0-9]+)|(?[0-9]+\.[0-9]+)|(?\$)|(?,)|(?:)|(?[A-Z_a-z0xC0-0xEFFFF][A-Za-z0-9\-_0xC0-0xEFFFF]*)).*?
bool mainLexer(string input, out uint token, out string match)
{
    uint s = 0;
    static int r100=-1, r101=-1, r102=-1, r103=-1, r104=-1, r105=-1, r106=-1, r107=-1, r108=-1, r109=-1, 
        r110=-1, r111=-1, r112=-1, r113=-1, r114=-1, r115=-1, r116=-1, r117=-1, r118=-1, r119=-1, 
        r120=-1, r121=-1, r122=-1, r123=-1, r124=-1, r125=-1, r126=-1, r127=-1, r128=-1, r129=-1, 
        r130=-1, r131=-1, r132=-1, r133=-1, r134=-1, r135=-1, r136=-1, r137=-1, r138=-1, r139=-1, 
        r140=-1, r141=-1, r142=-1, r143=-1, r144=-1, r145=-1, r146=-1, r147=-1, r148=-1, r149=-1, 
        r150=-1, r151=-1, r152=-1, r153=-1, r154=-1, r155=-1, r156=-1, r157=-1, r158=-1, r159=-1, 
        r160=-1, r161=-1, r162=-1, r163=-1, r164=-1, r165=-1, r166=-1, r167=-1, r168=-1, r169=-1, 
        r170=-1, r171=-1;

    for ( size_t p = 0, q = 0, p_end = input.length; p < p_end; q = p )
    {
        dchar c = cast(dchar)input[p];
        if ( c & 0x80 )
            decode(input, p);
        else
            ++p;
        switch ( s )
        {
            case 0:
                if ( c == 0x2f ) {
                    s = 26;
                    r117 = p;
                }
                else if ( c == 0x3d ) {
                    s = 2;
                    r101 = p;
                }
                else if ( c == 0x73 ) {
                    s = 20;
                    r113 = p;
                }
                else if ( c == 0x6d ) {
                    s = 21;
                    r113 = p;
                }
                else if ( c == 0x74 ) {
                    s = 22;
                    r113 = p;
                }
                else if ( c == 0x3c ) {
                    s = 24;
                    r115 = p;
                }
                else if ( c == 0x3e ) {
                    s = 25;
                    r116 = p;
                }
                else if ( c == 0x2e ) {
                    s = 27;
                    r118 = p;
                }
                else if ( c == 0x24 ) {
                    s = 1;
                    r100 = p;
                }
                else if ( c == 0x63 ) {
                    s = 28;
                    r113 = p;
                }
                else if ( c == 0x66 ) {
                    s = 29;
                    r113 = p;
                }
                else if ( c == 0x6e ) {
                    s = 30;
                    r113 = p;
                }
                else if ( c == 0x30 ) {
                    s = 31;
                    r112 = p;
                }
                else if ( c == 0x64 ) {
                    s = 32;
                    r113 = p;
                }
                else if ( c == 0x70 ) {
                    s = 33;
                    r113 = p;
                }
                else if ( c == 0x3a ) {
                    s = 19;
                    r114 = p;
                }
                else if ( c == 0x6f ) {
                    s = 18;
                    r113 = p;
                }
                else if ( c == 0x2a ) {
                    s = 6;
                    r104 = p;
                }
                else if ( c == 0x7d ) {
                    s = 16;
                    r111 = p;
                }
                else if ( c == 0x40 ) {
                    s = 7;
                    r105 = p;
                }
                else if ( c == 0x2d ) {
                    s = 5;
                    r103 = p;
                }
                else if ( c == 0x29 ) {
                    s = 9;
                    r107 = p;
                }
                else if ( c == 0x2b ) {
                    s = 4;
                    r102 = p;
                }
                else if ( c == 0x21 ) {
                    s = 3;
                }
                else if ( c == 0x28 ) {
                    s = 8;
                    r106 = p;
                }
                else if ( c == 0x7c ) {
                    s = 10;
                    r108 = p;
                }
                else if ( c == 0x27 ) {
                    s = 14;
                }
                else if ( c == 0x5b ) {
                    s = 11;
                    r109 = p;
                }
                else if ( c == 0x2c ) {
                    s = 15;
                    r111 = p;
                }
                else if ( c == 0x22 ) {
                    s = 13;
                }
                else if ( c >= 0x31 && c <= 0x39 ) {
                    s = 17;
                    r112 = p;
                }
                else if ( c == 0x5d ) {
                    s = 12;
                    r110 = p;
                }
                else if ( c == 0x61 ) {
                    s = 34;
                    r113 = p;
                }
                else if ( c >= 0x41 && c <= 0x5a || c == 0x5f || c == 0x62 || c == 0x65 || c >= 0x67 && c <= 0x6c || c >= 0x71 && c <= 0x72 || c >= 0x75 && c <= 0x7a ) {
                    s = 23;
                    r113 = p;
                }
                else
                    return false;
                break;
            case 1:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 260;
                }
                else
                    goto finish1;
                break;
            case 2:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 259;
                }
                else
                    goto finish2;
                break;
            case 3:
                if ( c == 0x3d ) {
                    s = 257;
                    r119 = p;
                }
                else
                    return false;
                break;
            case 4:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 256;
                }
                else
                    goto finish4;
                break;
            case 5:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 255;
                }
                else
                    goto finish5;
                break;
            case 6:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 254;
                }
                else
                    goto finish6;
                break;
            case 7:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 253;
                }
                else
                    goto finish7;
                break;
            case 8:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 252;
                }
                else
                    goto finish8;
                break;
            case 9:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 251;
                }
                else
                    goto finish9;
                break;
            case 10:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 250;
                }
                else
                    goto finish10;
                break;
            case 11:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 249;
                }
                else
                    goto finish11;
                break;
            case 12:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 248;
                }
                else
                    goto finish12;
                break;
            case 13:
                if ( c == 0x22 ) {
                    s = 246;
                    r120 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 245;
                }
                else
                    return false;
                break;
            case 14:
                if ( c == 0x27 ) {
                    s = 243;
                    r121 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 242;
                }
                else
                    return false;
                break;
            case 15:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 241;
                }
                else
                    goto finish15;
                break;
            case 16:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 241;
                }
                else
                    goto finish16;
                break;
            case 17:
                if ( c == 0x2e ) {
                    s = 149;
                }
                else if ( c >= 0x30 && c <= 0x39 ) {
                    s = 240;
                    r122 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 150;
                }
                else
                    goto finish17;
                break;
            case 18:
                if ( c == 0x72 ) {
                    s = 237;
                    r124 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish18;
                break;
            case 19:
                if ( c == 0x2a ) {
                    s = 234;
                    r125 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 235;
                }
                else
                    goto finish19;
                break;
            case 20:
                if ( c == 0x65 ) {
                    s = 228;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish20;
                break;
            case 21:
                if ( c == 0x6f ) {
                    s = 224;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish21;
                break;
            case 22:
                if ( c == 0x65 ) {
                    s = 219;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish22;
                break;
            case 23:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish23;
                break;
            case 24:
                if ( c == 0x3d ) {
                    s = 216;
                    r126 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 217;
                }
                else
                    goto finish24;
                break;
            case 25:
                if ( c == 0x3d ) {
                    s = 213;
                    r127 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 214;
                }
                else
                    goto finish25;
                break;
            case 26:
                if ( c == 0x2f ) {
                    s = 210;
                    r128 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 211;
                }
                else
                    goto finish26;
                break;
            case 27:
                if ( c == 0x2e ) {
                    s = 207;
                    r129 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 208;
                }
                else
                    goto finish27;
                break;
            case 28:
                if ( c == 0x6f ) {
                    s = 192;
                    r123 = p;
                }
                else if ( c == 0x68 ) {
                    s = 193;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish28;
                break;
            case 29:
                if ( c == 0x6f ) {
                    s = 171;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish29;
                break;
            case 30:
                if ( c == 0x61 ) {
                    s = 155;
                    r123 = p;
                }
                else if ( c == 0x6f ) {
                    s = 156;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish30;
                break;
            case 31:
                if ( c == 0x2e ) {
                    s = 149;
                }
                else if ( c >= 0x30 && c <= 0x39 ) {
                    s = 151;
                    r122 = p;
                }
                else if ( c == 0x2d || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 148;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 150;
                }
                else
                    goto finish31;
                break;
            case 32:
                if ( c == 0x69 ) {
                    s = 122;
                    r123 = p;
                }
                else if ( c == 0x65 ) {
                    s = 123;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish32;
                break;
            case 33:
                if ( c == 0x61 ) {
                    s = 71;
                    r123 = p;
                }
                else if ( c == 0x72 ) {
                    s = 72;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish33;
                break;
            case 34:
                if ( c == 0x74 ) {
                    s = 37;
                    r123 = p;
                }
                else if ( c == 0x6e ) {
                    s = 38;
                    r123 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                }
                else
                    goto finish34;
                break;
            case 35:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish35;
                break;
            case 36:
                goto finish36;
            case 37:
                if ( c == 0x74 ) {
                    s = 61;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish37;
                break;
            case 38:
                if ( c == 0x64 ) {
                    s = 39;
                    r131 = p;
                }
                else if ( c >= 0x63 && c <= 0x64 ) {
                    s = 40;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish38;
                break;
            case 39:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 60;
                    r132 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 59;
                }
                else
                    goto finish39;
                break;
            case 40:
                if ( c == 0x65 ) {
                    s = 41;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish40;
                break;
            case 41:
                if ( c == 0x73 ) {
                    s = 42;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish41;
                break;
            case 42:
                if ( c == 0x74 ) {
                    s = 43;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish42;
                break;
            case 43:
                if ( c == 0x6f ) {
                    s = 44;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish43;
                break;
            case 44:
                if ( c == 0x72 ) {
                    s = 45;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish44;
                break;
            case 45:
                if ( c == 0x3a ) {
                    s = 46;
                }
                else if ( c == 0x2d ) {
                    s = 47;
                    r137 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish45;
                break;
            case 46:
                if ( c == 0x3a ) {
                    s = 57;
                    r138 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish46;
                break;
            case 47:
                if ( c == 0x6f ) {
                    s = 48;
                    r139 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish47;
                break;
            case 48:
                if ( c == 0x72 ) {
                    s = 49;
                    r140 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r139;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish48;
                break;
            case 49:
                if ( c == 0x2d ) {
                    s = 50;
                    r141 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r140;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r140;
                }
                else
                    goto finish49;
                break;
            case 50:
                if ( c == 0x73 ) {
                    s = 51;
                    r142 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r141;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r141;
                }
                else
                    goto finish50;
                break;
            case 51:
                if ( c == 0x65 ) {
                    s = 52;
                    r143 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r142;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r142;
                }
                else
                    goto finish51;
                break;
            case 52:
                if ( c == 0x6c ) {
                    s = 53;
                    r144 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r143;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r143;
                }
                else
                    goto finish52;
                break;
            case 53:
                if ( c == 0x66 ) {
                    s = 54;
                    r145 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r144;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r144;
                }
                else
                    goto finish53;
                break;
            case 54:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 56;
                    r146 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 55;
                }
                else
                    goto finish54;
                break;
            case 55:
                goto finish55;
            case 56:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r146;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r146;
                }
                else
                    goto finish56;
                break;
            case 57:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 58;
                }
                else
                    goto finish57;
                break;
            case 58:
                goto finish58;
            case 59:
                goto finish59;
            case 60:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish60;
                break;
            case 61:
                if ( c == 0x72 ) {
                    s = 62;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish61;
                break;
            case 62:
                if ( c == 0x69 ) {
                    s = 63;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish62;
                break;
            case 63:
                if ( c == 0x62 ) {
                    s = 64;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish63;
                break;
            case 64:
                if ( c == 0x75 ) {
                    s = 65;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish64;
                break;
            case 65:
                if ( c == 0x74 ) {
                    s = 66;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish65;
                break;
            case 66:
                if ( c == 0x65 ) {
                    s = 67;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish66;
                break;
            case 67:
                if ( c == 0x3a ) {
                    s = 68;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x3a || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish67;
                break;
            case 68:
                if ( c == 0x3a ) {
                    s = 69;
                    r147 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish68;
                break;
            case 69:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 70;
                }
                else
                    goto finish69;
                break;
            case 70:
                goto finish70;
            case 71:
                if ( c == 0x72 ) {
                    s = 115;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish71;
                break;
            case 72:
                if ( c == 0x6f ) {
                    s = 73;
                    r130 = p;
                }
                else if ( c == 0x65 ) {
                    s = 74;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish72;
                break;
            case 73:
                if ( c == 0x63 ) {
                    s = 94;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish73;
                break;
            case 74:
                if ( c == 0x63 ) {
                    s = 75;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish74;
                break;
            case 75:
                if ( c == 0x65 ) {
                    s = 76;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish75;
                break;
            case 76:
                if ( c == 0x64 ) {
                    s = 77;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish76;
                break;
            case 77:
                if ( c == 0x69 ) {
                    s = 78;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish77;
                break;
            case 78:
                if ( c == 0x6e ) {
                    s = 79;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish78;
                break;
            case 79:
                if ( c == 0x67 ) {
                    s = 80;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish79;
                break;
            case 80:
                if ( c == 0x3a ) {
                    s = 81;
                }
                else if ( c == 0x2d ) {
                    s = 82;
                    r139 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish80;
                break;
            case 81:
                if ( c == 0x3a ) {
                    s = 92;
                    r148 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish81;
                break;
            case 82:
                if ( c == 0x73 ) {
                    s = 83;
                    r140 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r139;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish82;
                break;
            case 83:
                if ( c == 0x69 ) {
                    s = 84;
                    r141 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r140;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r140;
                }
                else
                    goto finish83;
                break;
            case 84:
                if ( c == 0x62 ) {
                    s = 85;
                    r142 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r141;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r141;
                }
                else
                    goto finish84;
                break;
            case 85:
                if ( c == 0x6c ) {
                    s = 86;
                    r143 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r142;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r142;
                }
                else
                    goto finish85;
                break;
            case 86:
                if ( c == 0x69 ) {
                    s = 87;
                    r144 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r143;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r143;
                }
                else
                    goto finish86;
                break;
            case 87:
                if ( c == 0x6e ) {
                    s = 88;
                    r149 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r144;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r144;
                }
                else
                    goto finish87;
                break;
            case 88:
                if ( c == 0x67 ) {
                    s = 89;
                    r150 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r149;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r149;
                }
                else
                    goto finish88;
                break;
            case 89:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 91;
                    r151 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 90;
                }
                else
                    goto finish89;
                break;
            case 90:
                goto finish90;
            case 91:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r151;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r151;
                }
                else
                    goto finish91;
                break;
            case 92:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 93;
                }
                else
                    goto finish92;
                break;
            case 93:
                goto finish93;
            case 94:
                if ( c == 0x65 ) {
                    s = 95;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish94;
                break;
            case 95:
                if ( c == 0x73 ) {
                    s = 96;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish95;
                break;
            case 96:
                if ( c == 0x73 ) {
                    s = 97;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish96;
                break;
            case 97:
                if ( c == 0x69 ) {
                    s = 98;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish97;
                break;
            case 98:
                if ( c == 0x6e ) {
                    s = 99;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish98;
                break;
            case 99:
                if ( c == 0x67 ) {
                    s = 100;
                    r139 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish99;
                break;
            case 100:
                if ( c == 0x2d ) {
                    s = 101;
                    r140 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r139;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish100;
                break;
            case 101:
                if ( c == 0x69 ) {
                    s = 102;
                    r141 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r140;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r140;
                }
                else
                    goto finish101;
                break;
            case 102:
                if ( c == 0x6e ) {
                    s = 103;
                    r142 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r141;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r141;
                }
                else
                    goto finish102;
                break;
            case 103:
                if ( c == 0x73 ) {
                    s = 104;
                    r143 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r142;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r142;
                }
                else
                    goto finish103;
                break;
            case 104:
                if ( c == 0x74 ) {
                    s = 105;
                    r144 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r143;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r143;
                }
                else
                    goto finish104;
                break;
            case 105:
                if ( c == 0x72 ) {
                    s = 106;
                    r149 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r144;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r144;
                }
                else
                    goto finish105;
                break;
            case 106:
                if ( c == 0x75 ) {
                    s = 107;
                    r146 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r149;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r149;
                }
                else
                    goto finish106;
                break;
            case 107:
                if ( c == 0x63 ) {
                    s = 108;
                    r151 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r146;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r146;
                }
                else
                    goto finish107;
                break;
            case 108:
                if ( c == 0x74 ) {
                    s = 109;
                    r152 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r151;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r151;
                }
                else
                    goto finish108;
                break;
            case 109:
                if ( c == 0x69 ) {
                    s = 110;
                    r153 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r152;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r152;
                }
                else
                    goto finish109;
                break;
            case 110:
                if ( c == 0x6f ) {
                    s = 111;
                    r154 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r153;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r153;
                }
                else
                    goto finish110;
                break;
            case 111:
                if ( c == 0x6e ) {
                    s = 112;
                    r155 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r154;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r154;
                }
                else
                    goto finish111;
                break;
            case 112:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 114;
                    r156 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 113;
                }
                else
                    goto finish112;
                break;
            case 113:
                goto finish113;
            case 114:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r156;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r156;
                }
                else
                    goto finish114;
                break;
            case 115:
                if ( c == 0x65 ) {
                    s = 116;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish115;
                break;
            case 116:
                if ( c == 0x6e ) {
                    s = 117;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish116;
                break;
            case 117:
                if ( c == 0x74 ) {
                    s = 118;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish117;
                break;
            case 118:
                if ( c == 0x3a ) {
                    s = 119;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x3a || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish118;
                break;
            case 119:
                if ( c == 0x3a ) {
                    s = 120;
                    r157 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish119;
                break;
            case 120:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 121;
                }
                else
                    goto finish120;
                break;
            case 121:
                goto finish121;
            case 122:
                if ( c == 0x76 ) {
                    s = 145;
                    r158 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish122;
                break;
            case 123:
                if ( c == 0x73 ) {
                    s = 124;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish123;
                break;
            case 124:
                if ( c == 0x63 ) {
                    s = 125;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish124;
                break;
            case 125:
                if ( c == 0x65 ) {
                    s = 126;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish125;
                break;
            case 126:
                if ( c == 0x6e ) {
                    s = 127;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish126;
                break;
            case 127:
                if ( c == 0x64 ) {
                    s = 128;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish127;
                break;
            case 128:
                if ( c == 0x61 ) {
                    s = 129;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish128;
                break;
            case 129:
                if ( c == 0x6e ) {
                    s = 130;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish129;
                break;
            case 130:
                if ( c == 0x74 ) {
                    s = 131;
                    r139 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish130;
                break;
            case 131:
                if ( c == 0x3a ) {
                    s = 132;
                }
                else if ( c == 0x2d ) {
                    s = 133;
                    r140 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r139;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish131;
                break;
            case 132:
                if ( c == 0x3a ) {
                    s = 143;
                    r159 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish132;
                break;
            case 133:
                if ( c == 0x6f ) {
                    s = 134;
                    r141 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r140;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r140;
                }
                else
                    goto finish133;
                break;
            case 134:
                if ( c == 0x72 ) {
                    s = 135;
                    r142 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r141;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r141;
                }
                else
                    goto finish134;
                break;
            case 135:
                if ( c == 0x2d ) {
                    s = 136;
                    r143 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r142;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r142;
                }
                else
                    goto finish135;
                break;
            case 136:
                if ( c == 0x73 ) {
                    s = 137;
                    r144 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r143;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r143;
                }
                else
                    goto finish136;
                break;
            case 137:
                if ( c == 0x65 ) {
                    s = 138;
                    r149 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r144;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r144;
                }
                else
                    goto finish137;
                break;
            case 138:
                if ( c == 0x6c ) {
                    s = 139;
                    r146 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r149;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r149;
                }
                else
                    goto finish138;
                break;
            case 139:
                if ( c == 0x66 ) {
                    s = 140;
                    r160 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r146;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r146;
                }
                else
                    goto finish139;
                break;
            case 140:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 142;
                    r152 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 141;
                }
                else
                    goto finish140;
                break;
            case 141:
                goto finish141;
            case 142:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r152;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r152;
                }
                else
                    goto finish142;
                break;
            case 143:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 144;
                }
                else
                    goto finish143;
                break;
            case 144:
                goto finish144;
            case 145:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 147;
                    r132 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 146;
                }
                else
                    goto finish145;
                break;
            case 146:
                goto finish146;
            case 147:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish147;
                break;
            case 148:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish148;
                break;
            case 149:
                if ( c >= 0x30 && c <= 0x39 ) {
                    s = 152;
                    r161 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 150;
                }
                else
                    goto finish149;
                break;
            case 150:
                goto finish150;
            case 151:
                if ( c == 0x2e ) {
                    s = 149;
                    r112 = r122;
                }
                else if ( c >= 0x30 && c <= 0x39 ) {
                    s = 151;
                    r112 = r122;
                    r122 = p;
                }
                else if ( c == 0x2d || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 148;
                    r112 = r122;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 150;
                    r112 = r122;
                }
                else
                    goto finish151;
                break;
            case 152:
                if ( c >= 0x30 && c <= 0x39 ) {
                    s = 153;
                    r162 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 154;
                }
                else
                    goto finish152;
                break;
            case 153:
                if ( c >= 0x30 && c <= 0x39 ) {
                    s = 153;
                    r161 = r162;
                    r162 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 154;
                    r161 = r162;
                }
                else
                    goto finish153;
                break;
            case 154:
                goto finish154;
            case 155:
                if ( c == 0x6d ) {
                    s = 161;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish155;
                break;
            case 156:
                if ( c == 0x64 ) {
                    s = 157;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish156;
                break;
            case 157:
                if ( c == 0x65 ) {
                    s = 158;
                    r163 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish157;
                break;
            case 158:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 160;
                    r133 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 159;
                }
                else
                    goto finish158;
                break;
            case 159:
                goto finish159;
            case 160:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish160;
                break;
            case 161:
                if ( c == 0x65 ) {
                    s = 162;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish161;
                break;
            case 162:
                if ( c == 0x73 ) {
                    s = 163;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish162;
                break;
            case 163:
                if ( c == 0x70 ) {
                    s = 164;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish163;
                break;
            case 164:
                if ( c == 0x61 ) {
                    s = 165;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish164;
                break;
            case 165:
                if ( c == 0x63 ) {
                    s = 166;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish165;
                break;
            case 166:
                if ( c == 0x65 ) {
                    s = 167;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish166;
                break;
            case 167:
                if ( c == 0x3a ) {
                    s = 168;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x3a || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish167;
                break;
            case 168:
                if ( c == 0x3a ) {
                    s = 169;
                    r164 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish168;
                break;
            case 169:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 170;
                }
                else
                    goto finish169;
                break;
            case 170:
                goto finish170;
            case 171:
                if ( c == 0x6c ) {
                    s = 172;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish171;
                break;
            case 172:
                if ( c == 0x6c ) {
                    s = 173;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish172;
                break;
            case 173:
                if ( c == 0x6f ) {
                    s = 174;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish173;
                break;
            case 174:
                if ( c == 0x77 ) {
                    s = 175;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish174;
                break;
            case 175:
                if ( c == 0x69 ) {
                    s = 176;
                    r135 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish175;
                break;
            case 176:
                if ( c == 0x6e ) {
                    s = 177;
                    r136 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r135;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r135;
                }
                else
                    goto finish176;
                break;
            case 177:
                if ( c == 0x67 ) {
                    s = 178;
                    r137 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish177;
                break;
            case 178:
                if ( c == 0x3a ) {
                    s = 179;
                }
                else if ( c == 0x2d ) {
                    s = 180;
                    r139 = p;
                }
                else if ( c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r137;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish178;
                break;
            case 179:
                if ( c == 0x3a ) {
                    s = 190;
                    r165 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r137;
                }
                else
                    goto finish179;
                break;
            case 180:
                if ( c == 0x73 ) {
                    s = 181;
                    r140 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r139;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r139;
                }
                else
                    goto finish180;
                break;
            case 181:
                if ( c == 0x69 ) {
                    s = 182;
                    r141 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r140;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r140;
                }
                else
                    goto finish181;
                break;
            case 182:
                if ( c == 0x62 ) {
                    s = 183;
                    r142 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r141;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r141;
                }
                else
                    goto finish182;
                break;
            case 183:
                if ( c == 0x6c ) {
                    s = 184;
                    r143 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r142;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r142;
                }
                else
                    goto finish183;
                break;
            case 184:
                if ( c == 0x69 ) {
                    s = 185;
                    r144 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r143;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r143;
                }
                else
                    goto finish184;
                break;
            case 185:
                if ( c == 0x6e ) {
                    s = 186;
                    r149 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r144;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r144;
                }
                else
                    goto finish185;
                break;
            case 186:
                if ( c == 0x67 ) {
                    s = 187;
                    r166 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r149;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r149;
                }
                else
                    goto finish186;
                break;
            case 187:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 189;
                    r151 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 188;
                }
                else
                    goto finish187;
                break;
            case 188:
                goto finish188;
            case 189:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r151;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r151;
                }
                else
                    goto finish189;
                break;
            case 190:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 191;
                }
                else
                    goto finish190;
                break;
            case 191:
                goto finish191;
            case 192:
                if ( c == 0x6d ) {
                    s = 200;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish192;
                break;
            case 193:
                if ( c == 0x69 ) {
                    s = 194;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish193;
                break;
            case 194:
                if ( c == 0x6c ) {
                    s = 195;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish194;
                break;
            case 195:
                if ( c == 0x64 ) {
                    s = 196;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish195;
                break;
            case 196:
                if ( c == 0x3a ) {
                    s = 197;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x3a || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish196;
                break;
            case 197:
                if ( c == 0x3a ) {
                    s = 198;
                    r167 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish197;
                break;
            case 198:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 199;
                }
                else
                    goto finish198;
                break;
            case 199:
                goto finish199;
            case 200:
                if ( c == 0x6d ) {
                    s = 201;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish200;
                break;
            case 201:
                if ( c == 0x65 ) {
                    s = 202;
                    r133 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish201;
                break;
            case 202:
                if ( c == 0x6e ) {
                    s = 203;
                    r134 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish202;
                break;
            case 203:
                if ( c == 0x74 ) {
                    s = 204;
                    r168 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r134;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r134;
                }
                else
                    goto finish203;
                break;
            case 204:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 206;
                    r136 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 205;
                }
                else
                    goto finish204;
                break;
            case 205:
                goto finish205;
            case 206:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r136;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r136;
                }
                else
                    goto finish206;
                break;
            case 207:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 209;
                }
                else
                    goto finish207;
                break;
            case 208:
                goto finish208;
            case 209:
                goto finish209;
            case 210:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 212;
                }
                else
                    goto finish210;
                break;
            case 211:
                goto finish211;
            case 212:
                goto finish212;
            case 213:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 215;
                }
                else
                    goto finish213;
                break;
            case 214:
                goto finish214;
            case 215:
                goto finish215;
            case 216:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 218;
                }
                else
                    goto finish216;
                break;
            case 217:
                goto finish217;
            case 218:
                goto finish218;
            case 219:
                if ( c == 0x78 ) {
                    s = 220;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish219;
                break;
            case 220:
                if ( c == 0x74 ) {
                    s = 221;
                    r169 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish220;
                break;
            case 221:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 223;
                    r133 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 222;
                }
                else
                    goto finish221;
                break;
            case 222:
                goto finish222;
            case 223:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r133;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r133;
                }
                else
                    goto finish223;
                break;
            case 224:
                if ( c == 0x64 ) {
                    s = 225;
                    r170 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish224;
                break;
            case 225:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 227;
                    r132 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 226;
                }
                else
                    goto finish225;
                break;
            case 226:
                goto finish226;
            case 227:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish227;
                break;
            case 228:
                if ( c == 0x6c ) {
                    s = 229;
                    r130 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r123;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r123;
                }
                else
                    goto finish228;
                break;
            case 229:
                if ( c == 0x66 ) {
                    s = 230;
                    r132 = p;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish229;
                break;
            case 230:
                if ( c == 0x3a ) {
                    s = 231;
                }
                else if ( c == 0x2d || c >= 0x30 && c <= 0x3a || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r132;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish230;
                break;
            case 231:
                if ( c == 0x3a ) {
                    s = 232;
                    r171 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r132;
                }
                else
                    goto finish231;
                break;
            case 232:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 233;
                }
                else
                    goto finish232;
                break;
            case 233:
                goto finish233;
            case 234:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 236;
                }
                else
                    goto finish234;
                break;
            case 235:
                goto finish235;
            case 236:
                goto finish236;
            case 237:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 239;
                    r130 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 238;
                }
                else
                    goto finish237;
                break;
            case 238:
                goto finish238;
            case 239:
                if ( c == 0x2d || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5a || c == 0x5f || c >= 0x61 && c <= 0x7a ) {
                    s = 35;
                    r113 = r130;
                    r123 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 36;
                    r113 = r130;
                }
                else
                    goto finish239;
                break;
            case 240:
                if ( c == 0x2e ) {
                    s = 149;
                    r112 = r122;
                }
                else if ( c >= 0x30 && c <= 0x39 ) {
                    s = 240;
                    r112 = r122;
                    r122 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 150;
                    r112 = r122;
                }
                else
                    goto finish240;
                break;
            case 241:
                goto finish241;
            case 242:
                if ( c == 0x27 ) {
                    s = 243;
                    r121 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 242;
                }
                else
                    return false;
                break;
            case 243:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 244;
                }
                else
                    goto finish243;
                break;
            case 244:
                goto finish244;
            case 245:
                if ( c == 0x22 ) {
                    s = 246;
                    r120 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 245;
                }
                else
                    return false;
                break;
            case 246:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 247;
                }
                else
                    goto finish246;
                break;
            case 247:
                goto finish247;
            case 248:
                goto finish248;
            case 249:
                goto finish249;
            case 250:
                goto finish250;
            case 251:
                goto finish251;
            case 252:
                goto finish252;
            case 253:
                goto finish253;
            case 254:
                goto finish254;
            case 255:
                goto finish255;
            case 256:
                goto finish256;
            case 257:
                if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 258;
                }
                else
                    goto finish257;
                break;
            case 258:
                goto finish258;
            case 259:
                goto finish259;
            case 260:
                goto finish260;
            default:
                assert(0);
        }
    }

    switch ( s )
    {
        case 1: finish1:
        case 260: finish260:
            match = input[0 .. r100];
            token = 46;
            break;
        case 2: finish2:
        case 259: finish259:
            match = input[0 .. r101];
            token = 3;
            break;
        case 4: finish4:
        case 256: finish256:
            match = input[0 .. r102];
            token = 9;
            break;
        case 198: finish198:
        case 199: finish199:
            match = input[0 .. r167];
            token = 24;
            break;
        case 5: finish5:
        case 255: finish255:
            match = input[0 .. r103];
            token = 10;
            break;
        case 6: finish6:
        case 254: finish254:
            match = input[0 .. r104];
            token = 11;
            break;
        case 7: finish7:
        case 253: finish253:
            match = input[0 .. r105];
            token = 34;
            break;
        case 8: finish8:
        case 252: finish252:
            match = input[0 .. r106];
            token = 35;
            break;
        case 9: finish9:
        case 251: finish251:
            match = input[0 .. r107];
            token = 36;
            break;
        case 10: finish10:
        case 250: finish250:
            match = input[0 .. r108];
            token = 14;
            break;
        case 204: finish204:
        case 205: finish205:
            match = input[0 .. r168];
            token = 38;
            break;
        case 11: finish11:
        case 249: finish249:
            match = input[0 .. r109];
            token = 17;
            break;
        case 12: finish12:
        case 248: finish248:
            match = input[0 .. r110];
            token = 18;
            break;
        case 109: finish109:
        case 142: finish142:
            match = input[0 .. r152];
            token = 49;
            break;
        case 110: finish110:
            match = input[0 .. r153];
            token = 49;
            break;
        case 207: finish207:
        case 209: finish209:
            match = input[0 .. r129];
            token = 20;
            break;
        case 111: finish111:
            match = input[0 .. r154];
            token = 49;
            break;
        case 15: finish15:
        case 16: finish16:
        case 241: finish241:
            match = input[0 .. r111];
            token = 0;
            break;
        case 112: finish112:
        case 113: finish113:
            match = input[0 .. r155];
            token = 37;
            break;
        case 210: finish210:
        case 212: finish212:
            match = input[0 .. r128];
            token = 16;
            break;
        case 17: finish17:
        case 31: finish31:
        case 149: finish149:
        case 150: finish150:
            match = input[0 .. r112];
            token = 44;
            break;
        case 114: finish114:
            match = input[0 .. r156];
            token = 49;
            break;
        case 18: finish18:
        case 20: finish20:
        case 21: finish21:
        case 22: finish22:
        case 23: finish23:
        case 28: finish28:
        case 29: finish29:
        case 30: finish30:
        case 32: finish32:
        case 33: finish33:
        case 34: finish34:
        case 36: finish36:
            match = input[0 .. r113];
            token = 49;
            break;
        case 19: finish19:
        case 235: finish235:
            match = input[0 .. r114];
            token = 48;
            break;
        case 213: finish213:
        case 215: finish215:
            match = input[0 .. r127];
            token = 8;
            break;
        case 216: finish216:
        case 218: finish218:
            match = input[0 .. r126];
            token = 7;
            break;
        case 120: finish120:
        case 121: finish121:
            match = input[0 .. r157];
            token = 30;
            break;
        case 24: finish24:
        case 217: finish217:
            match = input[0 .. r115];
            token = 5;
            break;
        case 25: finish25:
        case 214: finish214:
            match = input[0 .. r116];
            token = 6;
            break;
        case 26: finish26:
        case 211: finish211:
            match = input[0 .. r117];
            token = 15;
            break;
        case 27: finish27:
        case 208: finish208:
            match = input[0 .. r118];
            token = 19;
            break;
        case 221: finish221:
        case 222: finish222:
            match = input[0 .. r169];
            token = 39;
            break;
        case 225: finish225:
        case 226: finish226:
            match = input[0 .. r170];
            token = 13;
            break;
        case 35: finish35:
        case 37: finish37:
        case 38: finish38:
        case 71: finish71:
        case 72: finish72:
        case 122: finish122:
        case 123: finish123:
        case 148: finish148:
        case 155: finish155:
        case 156: finish156:
        case 171: finish171:
        case 192: finish192:
        case 193: finish193:
        case 219: finish219:
        case 224: finish224:
        case 228: finish228:
            match = input[0 .. r123];
            token = 49;
            break;
        case 232: finish232:
        case 233: finish233:
            match = input[0 .. r171];
            token = 33;
            break;
        case 39: finish39:
        case 59: finish59:
            match = input[0 .. r131];
            token = 2;
            break;
        case 40: finish40:
        case 61: finish61:
        case 73: finish73:
        case 74: finish74:
        case 115: finish115:
        case 124: finish124:
        case 157: finish157:
        case 161: finish161:
        case 172: finish172:
        case 194: finish194:
        case 200: finish200:
        case 220: finish220:
        case 229: finish229:
        case 239: finish239:
            match = input[0 .. r130];
            token = 49;
            break;
        case 234: finish234:
        case 236: finish236:
            match = input[0 .. r125];
            token = 43;
            break;
        case 41: finish41:
        case 60: finish60:
        case 62: finish62:
        case 75: finish75:
        case 94: finish94:
        case 116: finish116:
        case 125: finish125:
        case 147: finish147:
        case 162: finish162:
        case 173: finish173:
        case 195: finish195:
        case 201: finish201:
        case 227: finish227:
        case 230: finish230:
        case 231: finish231:
            match = input[0 .. r132];
            token = 49;
            break;
        case 42: finish42:
        case 63: finish63:
        case 76: finish76:
        case 95: finish95:
        case 117: finish117:
        case 126: finish126:
        case 160: finish160:
        case 163: finish163:
        case 174: finish174:
        case 196: finish196:
        case 197: finish197:
        case 202: finish202:
        case 223: finish223:
            match = input[0 .. r133];
            token = 49;
            break;
        case 43: finish43:
        case 64: finish64:
        case 77: finish77:
        case 96: finish96:
        case 118: finish118:
        case 119: finish119:
        case 127: finish127:
        case 164: finish164:
        case 175: finish175:
        case 203: finish203:
            match = input[0 .. r134];
            token = 49;
            break;
        case 140: finish140:
        case 141: finish141:
            match = input[0 .. r160];
            token = 26;
            break;
        case 237: finish237:
        case 238: finish238:
            match = input[0 .. r124];
            token = 1;
            break;
        case 44: finish44:
        case 65: finish65:
        case 78: finish78:
        case 97: finish97:
        case 128: finish128:
        case 165: finish165:
        case 176: finish176:
            match = input[0 .. r135];
            token = 49;
            break;
        case 45: finish45:
        case 46: finish46:
        case 66: finish66:
        case 79: finish79:
        case 98: finish98:
        case 129: finish129:
        case 166: finish166:
        case 177: finish177:
        case 206: finish206:
            match = input[0 .. r136];
            token = 49;
            break;
        case 143: finish143:
        case 144: finish144:
            match = input[0 .. r159];
            token = 25;
            break;
        case 47: finish47:
        case 67: finish67:
        case 68: finish68:
        case 80: finish80:
        case 81: finish81:
        case 99: finish99:
        case 130: finish130:
        case 167: finish167:
        case 168: finish168:
        case 178: finish178:
        case 179: finish179:
            match = input[0 .. r137];
            token = 49;
            break;
        case 48: finish48:
        case 82: finish82:
        case 100: finish100:
        case 131: finish131:
        case 132: finish132:
        case 180: finish180:
            match = input[0 .. r139];
            token = 49;
            break;
        case 145: finish145:
        case 146: finish146:
            match = input[0 .. r158];
            token = 12;
            break;
        case 49: finish49:
        case 83: finish83:
        case 101: finish101:
        case 133: finish133:
        case 181: finish181:
            match = input[0 .. r140];
            token = 49;
            break;
        case 243: finish243:
        case 244: finish244:
            match = input[0 .. r121];
            token = 42;
            break;
        case 50: finish50:
        case 84: finish84:
        case 102: finish102:
        case 134: finish134:
        case 182: finish182:
            match = input[0 .. r141];
            token = 49;
            break;
        case 51: finish51:
        case 85: finish85:
        case 103: finish103:
        case 135: finish135:
        case 183: finish183:
            match = input[0 .. r142];
            token = 49;
            break;
        case 52: finish52:
        case 86: finish86:
        case 104: finish104:
        case 136: finish136:
        case 184: finish184:
            match = input[0 .. r143];
            token = 49;
            break;
        case 246: finish246:
        case 247: finish247:
            match = input[0 .. r120];
            token = 41;
            break;
        case 53: finish53:
        case 87: finish87:
        case 105: finish105:
        case 137: finish137:
        case 185: finish185:
            match = input[0 .. r144];
            token = 49;
            break;
        case 54: finish54:
        case 55: finish55:
            match = input[0 .. r145];
            token = 22;
            break;
        case 151: finish151:
        case 240: finish240:
            match = input[0 .. r122];
            token = 44;
            break;
        case 152: finish152:
        case 154: finish154:
            match = input[0 .. r161];
            token = 45;
            break;
        case 56: finish56:
        case 107: finish107:
        case 139: finish139:
            match = input[0 .. r146];
            token = 49;
            break;
        case 153: finish153:
            match = input[0 .. r162];
            token = 45;
            break;
        case 57: finish57:
        case 58: finish58:
            match = input[0 .. r138];
            token = 21;
            break;
        case 158: finish158:
        case 159: finish159:
            match = input[0 .. r163];
            token = 40;
            break;
        case 257: finish257:
        case 258: finish258:
            match = input[0 .. r119];
            token = 4;
            break;
        case 69: finish69:
        case 70: finish70:
            match = input[0 .. r147];
            token = 23;
            break;
        case 169: finish169:
        case 170: finish170:
            match = input[0 .. r164];
            token = 29;
            break;
        case 88: finish88:
        case 106: finish106:
        case 138: finish138:
        case 186: finish186:
            match = input[0 .. r149];
            token = 49;
            break;
        case 89: finish89:
        case 90: finish90:
            match = input[0 .. r150];
            token = 32;
            break;
        case 187: finish187:
        case 188: finish188:
            match = input[0 .. r166];
            token = 28;
            break;
        case 91: finish91:
        case 108: finish108:
        case 189: finish189:
            match = input[0 .. r151];
            token = 49;
            break;
        case 92: finish92:
        case 93: finish93:
            match = input[0 .. r148];
            token = 31;
            break;
        case 190: finish190:
        case 191: finish191:
            match = input[0 .. r165];
            token = 27;
            break;
        default:
            return false;
    }
    return true;
}
// ((?[ \t\n\r]+)).*?
bool wsLexer(string input, out uint token, out string match)
{
    uint s = 0;
    static int r2=-1, r3=-1;

    for ( size_t p = 0, q = 0, p_end = input.length; p < p_end; q = p )
    {
        dchar c = cast(dchar)input[p];
        if ( c & 0x80 )
            decode(input, p);
        else
            ++p;
        switch ( s )
        {
            case 0:
                if ( c >= 0x9 && c <= 0xa || c == 0xd || c == 0x20 ) {
                    s = 1;
                    r2 = p;
                }
                else
                    return false;
                break;
            case 1:
                if ( c >= 0x9 && c <= 0xa || c == 0xd || c == 0x20 ) {
                    s = 3;
                    r3 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 2;
                }
                else
                    goto finish1;
                break;
            case 2:
                goto finish2;
            case 3:
                if ( c >= 0x9 && c <= 0xa || c == 0xd || c == 0x20 ) {
                    s = 3;
                    r2 = r3;
                    r3 = p;
                }
                else if ( c >= 0x9 && c <= 0x13 || c >= 0x20 && c <= 0x7e || c >= 0xa0 && c <= 0x24f || c >= 0x20a3 && c <= 0x20b5 ) {
                    s = 2;
                    r2 = r3;
                }
                else
                    goto finish3;
                break;
            default:
                assert(0);
        }
    }

    switch ( s )
    {
        case 1: finish1:
        case 2: finish2:
            match = input[0 .. r2];
            token = 0;
            break;
        case 3: finish3:
            match = input[0 .. r3];
            token = 0;
            break;
        default:
            return false;
    }
    return true;
}
// generated code end

#line 5499 "Parser.d"
// Written in the D programming language

/*
 *  This file has been automatically generated by APaGeD v0.4.2 beta - Attributed Parser Generator for D.
 *
 *  Sections generated from custom input are marked as "generated code" and
 *  are subject to the terms and conditions stated in one of these sections.
 *  The remaining sections are part of the APaGeD package and subject
 *  to the terms and conditions of the corresponding license.
 *
 *  Attributed Parser Generator for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0
 */


version(Tango)
{
    import tango.text.convert.Layout;
    import tango.text.Util;
    import tango.io.Stdout;

    private static Layout!(char) layout;

    static this()
    {
        layout = new Layout!(char);
    }

    string format(string fmt, ...)
    {
        return layout.convert(_arguments, _argptr, fmt);
    }

    alias char[] string;
}
else
{
    import std.string;
    import std.utf;
    debug import std.stdio;
}



/**************************************************************************************************
    Parser
**************************************************************************************************/

typedef uint Token;
alias Token Symbol;

const Token     EPSILON         = 1,
                ALTERN          = 2,
                EOS             = 3,
                FIRST_TOKEN     = 4,
                FIRST_NT        = 0x1000;

// generated code start
/*  Attributed Parser Generator for D
 *  Copyright (c) 2007 Jascha Wetzel. All rights reserved
 *  License: Artistic License 2.0, see license.txt
 */

const uint  MAX_INPUT_DUMP = 70,
            LR_STACK_RESERVE = 100,
            NODE_STACK_RESERVE = 20,
            BRANCH_STACK_RESERVE = 100;

/*******************************************************************************
    Stack based on dynamic array
*******************************************************************************/
struct Stack(T)
{
    size_t  _top;
    T[]     stack;

    void push(T v)
    {
        if ( _top >= stack.length )
            stack.length = stack.length*2+1;
        stack[_top] = v;
        ++_top;
    }

    void push(T[] vs)
    {
        size_t end = _top+vs.length;
        if ( end > stack.length )
            stack.length = end*2;
        stack[_top..end] = vs;
        _top = end;
    }
    alias push opCatAssign;

    void pop(size_t num)
    {
        assert(_top>=num);
        if ( num >= _top )
            _top = 0;
        else
            _top -= num;
    }

    T pop()
    {
        assert(_top>0);
        return stack[--_top];
    }

    T* popPtr()
    {
        assert(_top>0);
        return &stack[--_top];
    }

    T top()
    {
        assert(_top>0);
        return stack[_top-1];
    }

    T* topPtr()
    {
        assert(_top>0);
        return &stack[_top-1];
    }

    bool empty()
    {
        return _top == 0;
    }

    void clear()
    {
        _top = 0;
    }

    size_t length()
    {
        return _top;
    }

    T[] array()
    {
        return stack[0.._top];
    }

    Stack dup()
    {
        Stack s;
        s._top = _top;
        s.stack = stack.dup;
        return s;
    }
}

/**************************************************************************************************
    Information about rules needed for reduction and error handling
**************************************************************************************************/
align(1) struct RuleInfo
{
    bool    ast_node;
    uint    symbol_count,
            nt_count,
            nt_index;
    Symbol[]  symbols;
}

/**************************************************************************************************
    Information about LALR(1) entries needed for debugging
**************************************************************************************************/
align(1) struct EntryInfo
{
    uint    rule_index,
            pos;
}

/**************************************************************************************************
    Exception thrown on parser error
**************************************************************************************************/
class ParserException : Exception
{
    uint    line,
            column;
    string  filename,
            error_message,
            detail;

    this(uint line_, uint column_, string fname, string msg, string dtl="detail")
    {
        version(Tango)
            super(format("{}({}:{}): {}{}", fname, line_, column_, msg, dtl !is null?"\n"~dtl:""));
        else
            super(format("%s(%d:%d): %s%s", fname, line_, column_, msg, dtl !is null?"\n"~dtl:""));
        filename = fname;
        error_message = msg;
        line = line_;
        column = column_;
        detail = dtl;
    }
}

/**************************************************************************************************
    Wraps instantiation of the GLR parser class and the parse call.
**************************************************************************************************/
bool parse(string filename, string input, out SyntaxTree* root, bool detailed=false, bool recover=false, uint tab_width=4)
{
    GLRParser   g, w;
    static if ( is(WhitespaceGrammar : GLRParser) )
        w = new WhitespaceGrammar;
    g = new MainGrammar(w, tab_width);
    bool succ = g.parse(filename, input, &root, detailed, recover);
    return succ;
}

/**************************************************************************************************
    GLR parser
**************************************************************************************************/
abstract class GLRParser
{
    struct LRState
    {
        uint    index,
                line,
                column;
    }
    
    struct Node
    {
        SyntaxTree* node;
        bool        sync;
    }

    struct LRBranch
    {
        Stack!(LRState) stack;
        Stack!(Node)    node_stack;
        string          input,
                        lookahead,
                        lookahead_ws;
        uint            line,
                        column,
                        symbol;
        bool            fatal_errors;
        uint            action;
        version(ProfileConflicts)
            uint            last_conflict;
    }
    
    string          filename;
    uint            tab_width;
    
    // operational variables
    string              match,
                        match_ws,
                        lookahead,
                        lookahead_ws;
    SyntaxTree*         syntax_root;
    SyntaxTree[]        syntax_tree_pool;
    size_t              pool_top;
    Stack!(LRState)     stack;
    Stack!(Node)        node_stack;
    Stack!(LRBranch)    branch_stack;
    ParserException[]   recovered_errors;
    bool                recover_from_errors,
                        detailed_errors;

    version(ProfileConflicts) {
        uint[uint]      rr_conflict_counts,
                        sr_conflict_counts,
                        shift_failed_counts,
                        reduce_failed_counts;
        uint            branch_stack_max;
    }

    // grammar data
    GLRParser       ws_parser;
    uint            first_nt;
    RuleInfo[]      rule_infos;
    string[][]      error_message_lists;
    string[]        nt_names,
                    lexeme_names;
    EntryInfo[][]   entry_infos;

    this(GLRParser ws, uint tabw)
    {
        ws_parser = ws;
        tab_width = tabw;
        stack.stack.length = LR_STACK_RESERVE;
        node_stack.stack.length = NODE_STACK_RESERVE;
        branch_stack.stack.length = BRANCH_STACK_RESERVE;
    }

    /**************************************************************************************************
        Gets overridden with a first-longest-match lexical analizer.
    **************************************************************************************************/
    bool function(string, out uint, out string) lexer;

    /**************************************************************************************************
        Gets overridden with the main parser function.
    **************************************************************************************************/
    bool parse(string input) { return false; }
    bool parseWS(ref string input) { return false; }

    /**************************************************************************************************

    **************************************************************************************************/
    bool isErrorSynced(uint state);

    /**************************************************************************************************

    **************************************************************************************************/
    T APDmin(T)(T a, T b) { return a<b?a:b; }
    uint[] lookaheadForNT(uint nt_index, uint state);

    /**************************************************************************************************
        Count lines and columns in str
    **************************************************************************************************/
    uint countLocation(string str, ref uint col)
    {
        uint count;
        dchar linefeed;
        foreach ( c; str )
        {
            if ( c == 10 || c == 13 )
            {
                if ( linefeed == dchar.init || linefeed == c ) {
                    ++count;
                    col = 1;
                    linefeed = c;
                }
                else
                    linefeed = dchar.init;
            }
            else if ( c == 9 ) {
                col += tab_width;
                linefeed = dchar.init;
            }
            else {
                ++col;
                linefeed = dchar.init;
            }
        }
        return count;
    }

    /**************************************************************************************************
        Initiates the parse call.
    **************************************************************************************************/
    final bool parse(string fname, string input, SyntaxTree** root=null, bool detailed=false, bool recover=false)
    {
        filename = fname;
        recover_from_errors = recover;
        detailed_errors = detailed;

        stack.clear;
        node_stack.clear;
        branch_stack.clear;
        pool_top = 0;
        syntax_tree_pool = null;
        recovered_errors = null;

        if ( input.length > 1 )
        {
            if ( input[0 .. 2] == "\xfe\xff" ) {
                // UTF-16BE
                input = input[2 .. $];
            }
            else if ( input[0 .. 2] == "\xff\xfe" )
            {
                if ( input.length > 3 && input[2 .. 4] == "\x00\x00" ) {
                    // UTF-32LE
                    input = input[4 .. $];
                }
                else {
                    // UTF-16LE
                    input = input[2 .. $];
                }
            }
            else if ( input.length > 2 && input[0 .. 3] == "\xef\xbb\xbf" ) {
                // UTF-8
                input = input[3 .. $];
            }
            else if ( input.length > 3 && input[0 .. 4] == "\x00\x00\xfe\xff" ) {
                // UTF-32BE
                input = input[4 .. $];
            }
            else if ( input[0] > 0x7f )
                return false;
        }
        
        stack ~= LRState(0, 1, 1);
        if ( parse(input) )
        {
            if ( syntax_root !is null && root !is null )
            {
                *root = syntax_root;
                debug
                {
                    Stack!(SyntaxTree*) st;
                    st.push(*root);
                    while ( !st.empty )
                    {
                        SyntaxTree* pn = st.pop;
                        foreach ( c; pn._ST_children ) {
                            c.parent = pn;
                            st.push(c);
                        }
                    }
                }
            }
            return true;
        }
        return false;
    }

    /**************************************************************************************************
        Create a node for the syntax tree. Used by the main parse function.
    **************************************************************************************************/
    debug void createNode(uint line, uint column, uint rule_index, uint nt_count, uint nt_index)
    {
        if ( pool_top >= syntax_tree_pool.length )
            syntax_tree_pool.length = syntax_tree_pool.length*2+1;
        auto pn = &syntax_tree_pool[pool_top];
        ++pool_top;
        pn._ST_rule = rule_index;
        pn._ST_line_number = line;
        pn._ST_column_number = column;
        pn._ST_node_name = nt_names[nt_index];

        if ( nt_count > 0 )
        {
            pn._ST_children.length = nt_count;
            foreach ( i, n; node_stack.array[$-nt_count .. $] )
                pn._ST_children[i] = n.node;
            node_stack.pop(nt_count);
        }
        else {
            pn._ST_match = match;
            pn._ST_match_ws = match_ws;
        }
        node_stack ~= Node(pn, false);
    }

    else void createNode(uint line, uint column, uint rule_index, uint nt_count)
    {
        if ( pool_top >= syntax_tree_pool.length )
            syntax_tree_pool.length = syntax_tree_pool.length*2+1;
        auto pn = &syntax_tree_pool[pool_top];
        ++pool_top;
        pn._ST_rule = rule_index;
        pn._ST_line_number = line;
        pn._ST_column_number = column;

        if ( nt_count > 0 )
        {
            pn._ST_children.length = nt_count;
            foreach ( i, n; node_stack.array[$-nt_count .. $] )
                pn._ST_children[i] = n.node;
            node_stack.pop(nt_count);
        }
        else {
            pn._ST_match = match;
            pn._ST_match_ws = match_ws;
        }
        node_stack ~= Node(pn, false);
    }

    /**************************************************************************************************

    **************************************************************************************************/
    string ruleToString(RuleInfo* ri, int pos)
    {
        version(Tango)
            string str = format("{} ->", nt_names[ri.nt_index]);
        else
            string str = format("%s ->", nt_names[ri.nt_index]);
        
        foreach ( i, s; ri.symbols )
        {
            string name;
            if ( s == ALTERN )
                name = "ALTERN";
            else if ( s < FIRST_NT )
                name = lexeme_names[s-EOS];
            else
                name = nt_names[s-FIRST_NT];
            if ( i == pos )
                str ~= " .";
            version(Tango)
                str ~= format(" {}", name);
            else
                str ~= format(" %s", name);
        }
        if ( pos == ri.symbols.length )
            str ~= " .";
        return str;
    }

    /**************************************************************************************************
        Issue an error. Used by the main parse function.
    **************************************************************************************************/
    void error(string input, uint line, uint column, uint error_list, uint symbol, bool fatal=true)
    {
        // collect explicit error messages
        string errors;
        foreach ( i, err; error_message_lists[error_list] )
        {
            if ( i > 0 )
                errors ~= "\n";
            errors ~= err;
        }

        // construct automatic error message
        // if no explicit error message available
        if ( errors.length == 0 )
        {
            bool[string] expected_symbols;
            EntryInfo[] eis = entry_infos[stack.top.index];
            foreach ( ei; eis )
            {
                RuleInfo* ri = &rule_infos[ei.rule_index];
                if ( ei.pos < ri.symbols.length )
                {
                    auto s = ri.symbols[ei.pos];
                    if ( s < FIRST_NT )
                        expected_symbols["\""~lexeme_names[s-EOS]~"\""] = true;
                    else
                        expected_symbols[nt_names[s-FIRST_NT]] = true;
                }
                else
                {
                    foreach ( token; lookaheadForNT(ri.nt_index, stack.top.index) ) {
                        assert(token < FIRST_NT);
                        expected_symbols["\""~lexeme_names[token-EOS]~"\""] = true;
                    }
                }
            }

            string expected_str;
            auto last = expected_symbols.length-1;
            foreach ( i, symname; expected_symbols.keys )
            {
                if ( i > 0 )
                {
                    if ( i == last )
                        expected_str ~= " or ";
                    else 
                        expected_str ~= ", ";
                }
                expected_str ~= symname;
            }
            version(Tango)
                errors = format("found \"{}\", expected {}", lookahead, expected_str);
            else
                errors = format("found \"%s\", expected %s", lookahead, expected_str);
        }

        // construct detail message
        string detail;
        if ( detailed_errors )
        {
            string          lr_stack;
            foreach ( st; stack.array[1..$] )
            {
                version(Tango)
                    lr_stack ~= format("---- State {}{} ({}:{}) ----\n", st.index, isErrorSynced(st.index)?"*":"", st.line, st.column);
                else
                    lr_stack ~= format("---- State %d%s (%d:%d) ----\n", st.index, isErrorSynced(st.index)?"*":"", st.line, st.column);
                EntryInfo[] eis = entry_infos[st.index];
                foreach ( ei; eis )
                    lr_stack ~= ruleToString(&rule_infos[ei.rule_index], ei.pos)~"\n";
            }
            
            string node_stack_str;
            foreach ( i, n; node_stack.array )
            {
                if ( i > 0 )
                    node_stack_str ~= " ";
                node_stack_str ~= nt_names[rule_infos[n.node._ST_rule].nt_index];
                if ( n.sync )
                    node_stack_str ~= "*";
            }

            version(Tango)
                detail = format("input: {}\nlookahead: {}\nlexeme: {}\nAST node stack:\n{}\nLR stack:\n{}",
                    substitute(substitute(input[0..$>MAX_INPUT_DUMP?MAX_INPUT_DUMP:$], "\r", "\\r"), "\n", "\\n"),
                    lookahead, lexeme_names[symbol-EOS],
                    node_stack_str, lr_stack
                );
            else
                detail = format("input: %s\nlookahead: %s\nlexeme: %s\nAST node stack:\n%s\nLR stack:\n%s",
                    replace(replace(input[0..$>MAX_INPUT_DUMP?MAX_INPUT_DUMP:$], "\r", "\\r"), "\n", "\\n"),
                    lookahead, lexeme_names[symbol-EOS],
                    node_stack_str, lr_stack
                );
        }

        // throw error
        if ( fatal ) {
            version(Tango) Stdout.flush;
            throw new ParserException(line, column-lookahead.length, filename, errors, detail);
        }
        else
        {
            version(Tango)
                debug(nonfatal) Stdout.flush.format("\n{}({}:{}): {}\n{}\n", filename, line, column-lookahead.length, errors, detail);
            else
                debug(nonfatal) writefln("\n%s(%d:%d): %s\n%s", filename, line, column-lookahead.length, errors, detail);
        }
    }
}

/**************************************************************************************************
    Generated parsers
**************************************************************************************************/
class MainGrammar : public GLRParser
{
    const ushort[]  action_base =
    [
        0,37,88,139,188,121,125,170,174,194,207,211,215,228,246,250,263,267,271,322,351,402,451,304,
        500,1,9,549,598,7,647,19,20,38,696,725,757,808,837,888,308,384,937,986,0,350,1035,836,1055,
        1084,1135,1135,1186,1186,1237,1237,1288,1317,1368,1397,1448,1468,1497,1548,1597,1626,1677,
        1706,1757,1806,1826,1875,1895,1944,1973,130,2024,1625,1705,2053,2104,2104,2155,2184,2235,
        2264,2315,2335,2384,2433,2482,2531,31,2580,2630,2679,2708,85,2759,2780,2809,2860,2880,2909,
        2960,3009,3058,49,3087,131,3124,3175,3195,68,69,3244,3273,3324,74,3373,3422,3471,3520,94,
        97,3569,3618,3667,3716,3766,85,3815,3835,2
    ];
    const ubyte[]  action_check =
    [
        134,44,133,133,134,134,134,134,134,134,134,0,0,134,134,134,0,0,134,44,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,25,0,0,0,0,0,0,29,0,0,0,1,1,0,26,26,1,1,31,32,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,33,1,1,1,1,1,1,92,1,1,1,107,97,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,97,113,114,2,2,2,2,2,2,
        2,2,2,2,2,2,2,2,2,2,2,118,2,2,2,2,2,123,75,109,5,124,130,2,6,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
        3,3,3,3,134,3,5,5,5,5,6,6,6,6,75,109,134,134,5,134,134,134,6,3,134,134,109,134,134,7,134,
        134,134,8,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,7,7,7,7,8,8,8,8,134,134,134,10,7,134,
        134,11,8,4,134,12,134,134,134,134,9,9,9,9,4,134,134,134,13,134,134,134,9,10,10,10,10,11,11,
        11,11,12,12,12,12,10,14,134,134,11,15,134,134,12,13,13,13,13,134,134,134,134,134,16,134,
        134,13,17,134,134,134,18,14,14,14,14,15,15,15,15,134,134,134,134,14,134,134,134,15,16,16,
        16,16,17,17,17,17,18,18,18,18,16,134,134,23,17,134,134,40,18,19,19,19,19,19,19,19,19,19,19,
        19,19,19,19,19,19,19,19,134,19,23,23,23,23,40,40,40,40,45,45,134,134,23,134,134,134,40,19,
        134,134,134,20,134,134,134,134,134,45,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,
        45,134,20,20,20,20,134,134,134,41,134,45,134,134,20,21,21,21,21,21,21,21,21,21,21,21,21,21,
        21,21,21,21,21,134,21,41,41,41,41,134,134,134,134,134,134,134,134,41,134,134,134,134,21,
        134,134,134,134,134,134,134,134,134,134,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
        22,22,134,22,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,22,134,
        134,134,134,134,134,134,134,134,134,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
        24,24,24,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,24,134,134,
        134,134,134,134,134,134,134,134,24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,
        27,27,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,27,134,134,134,
        134,134,134,134,134,134,134,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,28,134,134,134,134,134,
        134,134,134,134,134,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,30,134,134,134,134,134,134,134,
        134,134,134,30,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,134,134,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,34,134,134,35,35,134,134,134,35,35,134,
        34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,134,35,35,35,35,35,35,36,35,35,35,
        134,134,35,134,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,134,134,36,36,36,36,134,134,
        134,134,134,134,134,134,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,134,37,
        134,134,134,134,134,134,134,134,47,47,134,134,134,134,134,134,134,37,134,134,134,38,134,
        134,134,134,134,47,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,47,134,38,38,38,38,
        134,134,134,134,134,47,134,134,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
        134,39,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,39,134,134,134,
        134,134,134,134,134,134,134,39,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,134,
        42,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,42,134,134,134,134,
        134,134,134,134,134,134,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,134,43,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,43,134,134,134,134,134,
        134,134,134,134,134,43,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,48,48,
        48,134,134,134,134,134,134,134,134,134,134,134,134,134,134,46,134,48,134,134,134,134,134,
        134,134,134,46,134,134,134,134,134,134,134,134,48,134,134,49,49,134,134,134,49,49,134,48,
        49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,134,49,49,49,49,49,49,134,49,49,49,134,
        134,49,50,50,50,50,134,134,134,134,134,134,134,51,51,134,134,134,51,51,134,50,51,51,51,51,
        51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,134,51,51,51,50,134,51,52,52,
        52,52,52,52,134,134,134,134,134,53,53,134,134,134,53,53,134,52,53,53,53,53,53,53,53,53,53,
        53,53,53,53,53,53,53,53,52,53,53,53,53,53,53,134,53,53,53,52,134,53,54,54,54,54,54,54,54,
        54,54,54,134,55,55,134,134,134,55,55,134,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,
        55,55,54,55,55,55,55,55,55,134,55,55,55,54,134,55,56,56,56,56,56,56,56,56,56,56,56,56,134,
        134,134,134,134,134,134,56,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        134,56,134,134,57,57,134,134,134,57,57,134,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,
        57,57,134,57,57,57,57,57,57,134,57,57,57,134,134,57,58,58,58,58,58,58,58,58,58,58,58,58,58,
        58,58,134,134,134,134,58,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        134,58,134,134,59,59,134,134,134,59,59,134,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
        59,59,134,59,59,59,59,59,59,134,59,59,59,134,134,59,60,60,60,60,60,60,60,60,60,60,60,60,60,
        60,60,134,134,134,134,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,134,60,134,61,134,
        134,134,134,134,134,134,134,60,134,134,134,134,134,134,134,134,61,134,134,134,62,134,134,
        134,62,62,134,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,134,62,62,62,62,62,62,
        134,62,62,62,134,134,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,134,134,134,63,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,63,134,134,134,134,134,134,
        134,134,134,134,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,134,134,134,
        134,134,134,134,134,77,77,77,77,134,134,134,134,134,64,134,134,134,65,134,134,134,134,134,
        77,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,77,134,65,65,65,65,134,134,134,134,
        134,77,134,134,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,134,66,134,134,134,
        134,134,134,134,134,78,78,78,78,78,78,134,134,134,66,134,134,134,67,134,134,134,134,134,78,
        66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,78,134,67,67,67,67,134,134,134,134,134,
        78,134,134,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,134,68,134,134,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,68,134,134,134,134,134,134,134,134,134,
        134,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,
        70,70,70,70,70,70,70,70,134,69,134,70,134,134,134,134,134,134,134,134,69,134,134,134,134,
        134,134,134,134,70,134,134,134,134,134,134,134,134,134,134,70,71,71,71,71,71,71,71,71,71,
        71,71,71,71,71,71,71,134,134,134,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,134,71,
        134,72,134,134,134,134,134,134,134,134,71,134,134,134,134,134,134,134,134,72,134,134,134,
        134,134,134,134,134,134,134,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,134,
        73,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,73,134,134,74,74,
        134,134,134,74,74,134,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,134,74,74,74,
        74,74,74,134,74,74,74,134,134,74,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,
        76,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,76,134,134,79,79,
        134,134,134,79,79,134,76,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,134,79,79,79,
        79,79,79,134,79,79,79,134,134,79,80,80,80,80,80,80,80,80,80,80,134,81,81,134,134,134,81,81,
        134,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,80,81,81,81,81,81,81,134,81,81,
        81,80,134,81,82,82,82,82,82,82,82,82,82,82,82,82,134,134,134,134,134,134,134,82,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,82,134,134,83,83,134,134,134,
        83,83,134,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,134,83,83,83,83,83,83,134,
        83,83,83,134,134,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,134,134,134,134,84,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,84,134,134,85,85,134,134,
        134,85,85,134,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,134,85,85,85,85,85,85,
        134,85,85,85,134,134,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,134,134,134,134,86,87,
        87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,134,86,134,87,134,134,134,134,134,134,134,134,
        86,134,134,134,134,134,134,134,134,87,134,134,134,134,134,134,134,134,134,134,87,88,88,88,
        88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,134,134,134,88,134,134,134,134,134,134,134,134,134,134,88,89,89,89,89,89,
        89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,134,134,89,134,134,134,134,134,134,134,134,134,134,89,90,90,90,90,90,90,90,
        90,90,90,90,90,90,90,90,90,90,90,90,90,134,134,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,90,134,134,134,134,134,134,134,134,134,134,90,91,91,91,91,91,91,91,91,91,
        91,91,91,91,91,91,91,91,91,91,91,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,91,134,134,134,134,134,134,134,134,134,134,91,93,93,93,93,93,93,93,93,93,93,93,
        93,93,93,93,93,93,93,93,93,93,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        93,93,134,134,134,134,134,134,93,134,134,134,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,
        94,94,94,94,94,94,94,94,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,94,
        134,134,134,134,134,134,134,134,134,134,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,
        95,95,95,95,95,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,95,134,134,
        96,96,134,134,134,96,96,134,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,134,96,
        96,96,96,96,96,134,96,96,96,134,134,96,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,
        98,98,98,98,99,99,99,99,99,99,99,99,99,99,134,134,134,134,134,134,98,134,134,99,134,134,
        134,134,134,134,134,98,134,134,134,134,134,134,134,134,134,99,134,134,100,100,134,134,134,
        100,100,134,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,134,100,
        100,100,100,100,100,134,100,100,100,134,134,100,101,101,101,101,101,101,101,101,101,101,
        101,101,134,134,134,134,134,134,134,101,102,102,102,102,102,102,102,102,102,102,102,102,
        102,102,102,134,134,101,134,102,134,134,134,134,134,134,134,134,101,134,134,134,134,134,
        134,134,134,102,134,134,103,103,134,134,134,103,103,134,102,103,103,103,103,103,103,103,
        103,103,103,103,103,103,103,103,103,103,134,103,103,103,103,103,103,134,103,103,103,134,
        134,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,134,134,134,134,104,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,104,134,134,134,134,
        134,134,134,134,134,134,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,
        105,105,105,105,105,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        105,134,134,134,134,134,134,134,134,134,134,105,106,106,106,106,106,106,106,106,106,106,
        106,106,106,106,106,106,106,106,106,106,134,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,134,106,134,134,108,108,134,134,134,108,108,134,106,108,108,108,108,108,
        108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,134,108,108,
        108,110,110,108,134,134,110,110,134,134,110,110,110,110,110,110,110,110,110,110,110,110,
        110,110,110,110,110,110,110,110,110,110,110,110,134,110,110,110,134,134,110,111,111,111,
        111,111,111,111,111,111,111,111,111,134,134,134,134,134,134,134,111,112,112,112,112,112,
        112,112,112,112,112,112,112,112,112,112,134,134,111,134,112,134,134,134,134,134,134,134,
        134,111,134,134,134,134,134,134,134,134,112,134,134,134,134,134,134,134,134,134,134,112,
        115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,115,134,134,116,116,134,134,
        134,116,116,134,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,
        134,116,116,116,116,116,116,134,116,116,116,134,134,116,117,117,117,117,117,117,117,117,
        117,117,117,117,134,134,134,134,134,134,134,117,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,134,134,134,117,134,134,134,134,134,134,134,134,134,134,117,119,119,119,
        119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,134,134,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,119,134,134,134,134,134,134,134,134,134,
        134,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,120,134,134,134,134,
        134,134,134,134,134,134,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,
        121,121,121,134,121,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        121,134,134,134,134,134,134,134,134,134,134,121,122,122,122,122,122,122,122,122,122,122,
        122,122,122,122,122,122,122,122,134,122,134,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,134,134,122,134,134,134,134,134,134,134,134,134,134,122,125,125,125,125,125,
        125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,134,134,134,134,134,134,134,
        134,134,134,134,134,134,134,134,134,134,125,134,134,134,134,134,134,134,134,134,134,125,
        126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,134,134,
        134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,126,134,134,134,134,134,134,
        134,134,134,134,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
        127,127,127,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,127,134,
        134,134,134,134,134,134,134,134,134,127,128,128,128,128,128,128,128,128,128,128,128,128,
        128,128,128,128,128,128,128,128,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
        134,134,134,128,134,134,134,134,134,134,128,134,134,134,128,128,129,129,129,129,129,129,
        129,129,129,129,129,129,129,129,129,129,129,129,129,129,134,134,134,134,134,134,134,134,
        134,134,134,134,134,134,134,134,134,129,134,134,134,134,134,134,134,134,134,134,129,131,
        131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,
        132,132,132,132,132,132,132,132,132,132,132,132,134,134,131,134,132,134,134,134,134,134,
        134,134,134,131,134,134,134,134,134,134,134,134,132,134,134,134,134,134,134,134,134,134,
        134,132
    ];
    const ushort[]  action_data =
    [
        768,301,5,301,768,768,768,768,768,768,768,257,578,768,768,768,258,292,768,302,259,260,261,
        262,263,264,265,266,267,268,269,270,271,272,273,274,330,2,578,578,578,578,283,284,286,344,
        346,348,257,578,0,283,284,258,292,582,583,259,260,261,262,263,264,265,266,267,268,269,270,
        271,272,273,274,330,585,578,578,578,578,283,284,349,344,346,348,364,301,0,551,551,551,551,
        551,551,551,551,551,551,551,551,1,551,551,551,354,599,371,551,259,260,261,262,263,264,265,
        266,267,268,269,270,271,272,273,274,349,551,578,578,578,578,380,301,301,564,381,349,551,
        565,578,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,560,768,560,
        564,564,564,564,565,565,565,565,332,600,768,768,564,768,768,768,565,560,768,768,366,768,
        768,566,768,768,768,567,560,561,561,561,561,561,561,561,561,561,561,561,561,561,561,561,
        561,561,561,568,561,566,566,566,566,567,567,567,567,768,768,768,569,566,768,768,570,567,
        561,768,571,768,768,768,768,568,568,568,568,561,768,768,768,572,768,768,768,568,569,569,
        569,569,570,570,570,570,571,571,571,571,569,573,768,768,570,574,768,768,571,572,572,572,
        572,768,768,768,768,768,575,768,768,572,576,768,768,768,577,573,573,573,573,574,574,574,
        574,768,768,768,768,573,768,768,768,574,575,575,575,575,576,576,576,576,577,577,577,577,
        575,768,768,280,576,768,768,562,577,550,550,550,550,550,550,550,550,550,550,550,550,550,
        550,550,550,276,294,768,550,281,287,288,289,562,562,562,562,514,514,768,768,349,768,768,
        768,562,550,768,768,768,578,768,768,768,768,768,514,550,259,260,261,262,263,264,265,266,
        267,268,269,270,271,272,273,274,514,768,578,578,578,578,768,768,768,563,768,514,768,768,
        578,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,768,555,563,
        563,563,563,768,768,768,768,768,768,768,768,563,768,768,768,768,555,768,768,768,768,768,
        768,768,768,768,768,555,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,
        559,559,768,559,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,559,
        768,768,768,768,768,768,768,768,768,768,559,588,588,588,588,588,588,588,588,588,588,588,
        588,588,588,588,588,588,588,588,588,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,588,768,768,768,768,768,768,768,768,768,768,588,586,586,586,586,586,586,
        586,586,586,586,586,586,586,586,586,586,586,586,586,586,768,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,586,768,768,768,768,768,768,768,768,768,768,586,587,
        587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,587,768,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,587,768,768,768,768,768,768,768,
        768,768,768,587,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,
        581,581,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,581,768,768,
        768,768,768,768,768,768,768,768,581,547,547,547,547,547,547,547,547,547,547,547,547,547,
        547,547,547,547,547,291,547,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,547,768,768,257,578,768,768,768,258,292,768,547,259,260,261,262,263,264,265,266,
        267,268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,578,344,346,348,768,768,0,
        768,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,768,768,578,578,578,
        578,768,768,768,768,768,768,768,768,578,553,553,553,553,553,553,553,553,553,553,553,553,
        553,553,553,553,276,294,768,553,768,768,768,768,768,768,768,768,513,513,768,768,768,768,
        768,768,768,553,768,768,768,578,768,768,768,768,768,513,553,259,260,261,262,263,264,265,
        266,267,268,269,270,271,272,273,274,513,768,578,578,578,578,768,768,768,768,768,513,768,
        768,578,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,768,557,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,557,768,768,768,768,
        768,768,768,768,768,768,557,556,556,556,556,556,556,556,556,556,556,556,556,556,556,556,
        556,556,556,768,556,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,
        556,768,768,768,768,768,768,768,768,768,768,556,554,554,554,554,554,554,554,554,554,554,
        554,554,554,554,554,554,554,554,768,554,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,768,554,768,768,768,768,768,768,768,768,768,768,554,544,544,544,544,544,
        544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,512,512,305,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,544,768,512,768,768,768,768,768,768,768,768,544,
        768,768,768,768,768,768,768,768,512,768,768,257,578,768,768,768,258,292,768,512,259,260,
        261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,
        768,344,346,348,768,768,0,516,516,516,307,768,768,768,768,768,768,768,257,578,768,768,768,
        258,292,768,516,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,516,
        578,578,578,578,283,284,768,344,346,348,516,768,0,518,518,518,518,309,335,768,768,768,768,
        768,257,578,768,768,768,258,292,768,518,259,260,261,262,263,264,265,266,267,268,269,270,
        271,272,273,274,330,518,578,578,578,578,283,284,768,344,346,348,518,768,0,520,520,520,520,
        520,520,311,337,356,372,768,257,578,768,768,768,258,292,768,520,259,260,261,262,263,264,
        265,266,267,268,269,270,271,272,273,274,330,520,578,578,578,578,283,284,768,344,346,348,
        520,768,0,523,523,523,523,523,523,523,523,523,523,313,339,768,768,768,768,768,768,768,523,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,523,768,768,257,578,
        768,768,768,258,292,768,523,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,
        274,330,768,578,578,578,578,283,284,768,344,346,348,768,768,0,527,527,527,527,527,527,527,
        527,527,527,527,527,315,341,359,768,768,768,768,527,768,768,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,527,768,768,257,578,768,768,768,258,292,768,527,259,260,
        261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,
        768,344,346,348,768,768,0,530,530,530,530,530,530,530,530,530,530,530,530,530,530,530,768,
        768,768,768,530,535,535,535,535,535,535,535,535,535,535,535,535,535,535,535,318,768,530,
        768,535,768,768,768,768,768,768,768,768,530,768,768,768,768,768,768,768,768,535,768,768,
        768,578,768,768,768,258,292,768,535,259,260,261,262,263,264,265,266,267,268,269,270,271,
        272,273,274,330,768,578,578,578,578,283,284,768,344,346,348,768,768,0,537,537,537,537,537,
        537,537,537,537,537,537,537,537,537,537,537,768,768,768,537,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,537,768,768,768,768,768,768,768,768,768,768,537,
        539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,539,321,323,291,539,768,768,
        768,768,768,768,768,768,515,515,515,307,768,768,768,768,768,539,768,768,768,578,768,768,
        768,768,768,515,539,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,515,
        768,578,578,578,578,768,768,768,768,768,515,768,768,578,540,540,540,540,540,540,540,540,
        540,540,540,540,540,540,540,540,276,294,768,540,768,768,768,768,768,768,768,768,517,517,
        517,517,309,335,768,768,768,540,768,768,768,578,768,768,768,768,768,517,540,259,260,261,
        262,263,264,265,266,267,268,269,270,271,272,273,274,517,768,578,578,578,578,768,768,768,
        768,768,517,768,768,578,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,541,
        276,294,768,541,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,541,
        768,768,768,768,768,768,768,768,768,768,541,543,543,543,543,543,543,543,543,543,543,543,
        543,543,543,543,543,543,543,543,543,538,538,538,538,538,538,538,538,538,538,538,538,538,
        538,538,538,768,543,768,538,768,768,768,768,768,768,768,768,543,768,768,768,768,768,768,
        768,768,538,768,768,768,768,768,768,768,768,768,768,538,549,549,549,549,549,549,549,549,
        549,549,549,549,549,549,549,549,768,768,768,549,552,552,552,552,552,552,552,552,552,552,
        552,552,552,552,552,552,768,549,768,552,768,768,768,768,768,768,768,768,549,768,768,768,
        768,768,768,768,768,552,768,768,768,768,768,768,768,768,768,768,552,548,548,548,548,548,
        548,548,548,548,548,548,548,548,548,548,548,276,294,768,548,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,548,768,768,257,578,768,768,768,258,292,768,548,
        259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,578,578,578,578,
        283,284,768,344,346,348,768,768,0,596,596,596,596,596,596,596,596,596,596,596,596,596,596,
        596,596,596,596,596,596,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,596,768,768,257,578,768,768,768,258,292,768,596,259,260,261,262,263,264,265,266,267,
        268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,768,344,346,348,768,768,0,521,
        521,521,521,521,521,311,337,356,372,768,257,578,768,768,768,258,292,768,521,259,260,261,
        262,263,264,265,266,267,268,269,270,271,272,273,274,330,521,578,578,578,578,283,284,768,
        344,346,348,521,768,0,524,524,524,524,524,524,524,524,524,524,313,339,768,768,768,768,768,
        768,768,524,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,524,768,
        768,257,578,768,768,768,258,292,768,524,259,260,261,262,263,264,265,266,267,268,269,270,
        271,272,273,274,330,768,578,578,578,578,283,284,768,344,346,348,768,768,0,528,528,528,528,
        528,528,528,528,528,528,528,528,315,341,359,768,768,768,768,528,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,768,528,768,768,257,578,768,768,768,258,292,768,
        528,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,578,578,578,
        578,283,284,768,344,346,348,768,768,0,531,531,531,531,531,531,531,531,531,531,531,531,531,
        531,531,768,768,768,768,531,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536,
        536,768,531,768,536,768,768,768,768,768,768,768,768,531,768,768,768,768,768,768,768,768,
        536,768,768,768,768,768,768,768,768,768,768,536,591,591,591,591,591,591,591,591,591,591,
        591,591,591,591,591,591,591,591,591,591,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,768,591,768,768,768,768,768,768,768,768,768,768,591,593,593,593,593,593,
        593,593,593,593,593,593,593,593,593,593,593,593,593,593,593,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,593,768,768,768,768,768,768,768,768,768,768,593,
        592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,592,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,592,768,768,768,768,768,768,
        768,768,768,768,592,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,542,
        542,542,542,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,542,768,
        768,768,768,768,768,768,768,768,768,542,604,604,604,604,604,604,604,604,604,604,604,604,
        604,604,604,604,604,604,604,604,604,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,604,604,768,768,768,768,768,768,604,768,768,768,604,604,607,607,607,607,607,607,
        607,607,607,607,607,607,607,607,607,607,607,607,607,607,607,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,607,768,768,768,768,768,768,768,768,768,768,607,597,
        597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,3,597,374,768,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,597,768,768,257,578,768,768,768,258,
        292,768,597,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,578,
        578,578,578,283,284,768,344,346,348,768,768,0,606,606,606,606,606,606,606,606,606,606,606,
        606,606,606,606,606,606,606,606,606,606,519,519,519,519,519,519,311,337,356,372,768,768,
        768,768,768,768,606,768,768,519,768,768,768,768,768,768,768,606,768,768,768,768,768,768,
        768,768,768,519,768,768,257,578,768,768,768,258,292,768,519,259,260,261,262,263,264,265,
        266,267,268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,768,344,346,348,768,
        768,0,525,525,525,525,525,525,525,525,525,525,313,339,768,768,768,768,768,768,768,525,529,
        529,529,529,529,529,529,529,529,529,529,529,315,341,359,768,768,525,768,529,768,768,768,
        768,768,768,768,768,525,768,768,768,768,768,768,768,768,529,768,768,257,578,768,768,768,
        258,292,768,529,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,768,
        578,578,578,578,283,284,768,344,346,348,768,768,0,532,532,532,532,532,532,532,532,532,532,
        532,532,532,532,532,768,768,768,768,532,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,768,532,768,768,768,768,768,768,768,768,768,768,532,595,595,595,595,595,
        595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,595,768,768,768,768,768,768,768,768,768,768,595,
        594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,594,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,594,768,768,257,578,768,768,
        768,258,292,768,594,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,330,
        601,578,578,578,578,283,284,768,344,346,348,257,578,0,768,768,258,292,768,768,259,260,261,
        262,263,264,265,266,267,268,269,270,271,272,273,274,330,601,578,578,578,578,283,284,768,
        344,346,348,768,768,0,522,522,522,522,522,522,522,522,522,522,313,339,768,768,768,768,768,
        768,768,522,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,768,768,522,768,
        533,768,768,768,768,768,768,768,768,522,768,768,768,768,768,768,768,768,533,768,768,768,
        768,768,768,768,768,768,768,533,598,598,598,598,598,598,598,598,598,598,598,598,598,598,
        598,598,598,598,598,598,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,598,768,768,257,578,768,768,768,258,292,768,598,259,260,261,262,263,264,265,266,267,
        268,269,270,271,272,273,274,330,768,578,578,578,578,283,284,768,344,346,348,768,768,0,526,
        526,526,526,526,526,526,526,526,526,313,339,768,768,768,768,768,768,768,526,768,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,526,768,768,768,768,768,768,768,
        768,768,768,526,605,605,605,605,605,605,605,605,605,605,605,605,605,605,605,605,605,605,
        605,605,605,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,605,768,768,
        768,768,768,768,768,768,768,768,605,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,291,4,768,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,4,768,768,768,768,768,768,768,768,
        768,768,4,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,545,768,545,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,545,768,768,768,768,
        768,768,768,768,768,768,545,558,558,558,558,558,558,558,558,558,558,558,558,558,558,558,
        558,558,558,768,558,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,
        558,768,768,768,768,768,768,768,768,768,768,558,580,580,580,580,580,580,580,580,580,580,
        580,580,580,580,580,580,580,580,580,580,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,768,580,768,768,768,768,768,768,768,768,768,768,580,579,579,579,579,579,
        579,579,579,579,579,579,579,579,579,579,579,579,579,579,579,768,768,768,768,768,768,768,
        768,768,768,768,768,768,768,768,768,768,579,768,768,768,768,768,768,768,768,768,768,579,
        590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,590,768,768,
        768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,590,768,768,768,768,768,768,
        768,768,768,768,590,602,602,602,602,602,602,602,602,602,602,602,602,602,602,602,602,602,
        602,602,602,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,602,768,
        768,768,768,768,768,385,768,768,768,602,386,589,589,589,589,589,589,589,589,589,589,589,
        589,589,589,589,589,589,589,589,589,768,768,768,768,768,768,768,768,768,768,768,768,768,
        768,768,768,768,589,768,768,768,768,768,768,768,768,768,768,589,603,603,603,603,603,603,
        603,603,603,603,603,603,603,603,603,603,603,603,603,603,534,534,534,534,534,534,534,534,
        534,534,534,534,534,534,534,768,768,603,768,534,768,768,768,768,768,768,768,768,603,768,
        768,768,768,768,768,768,768,534,768,768,768,768,768,768,768,768,768,768,534
    ];
    const ushort[]  goto_base =
    [
        0,26,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,48,0,0,1,0,0,0,0,0,0,0,0,82,99,0,104,0,0,0,
        0,0,0,0,0,0,0,125,0,155,0,184,0,212,0,239,0,265,0,0,286,0,12,303,0,310,0,0,0,0,0,0,334,24,
        0,0,0,363,0,391,0,418,0,444,0,0,0,0,0,0,5,0,0,0,476,30,0,0,504,0,0,530,0,0,0,0,562,31,594,
        0,0,0,0,0,622,0,17,0,45,0,0,0,0,0,0,0,0,0,18,0,0,52
    ];
    const ubyte[]  goto_check =
    [
        0,44,0,0,0,0,0,0,0,0,0,0,34,34,0,0,0,0,0,0,0,0,0,0,64,75,0,26,0,0,0,97,109,0,1,1,1,1,92,92,
        1,1,1,1,1,1,1,1,1,1,118,130,1,133,1,1,1,120,120,1,2,2,2,2,2,2,2,20,20,20,20,20,23,23,134,
        23,134,134,134,134,23,23,35,134,35,35,35,35,35,35,35,35,35,35,134,134,35,35,35,35,35,35,35,
        35,35,35,134,134,35,134,35,35,35,134,134,35,36,36,36,36,36,36,36,38,38,38,38,38,49,49,49,
        49,49,49,49,49,49,134,134,49,49,49,49,49,49,49,49,49,49,134,134,49,134,49,49,49,134,134,49,
        51,51,51,51,51,51,51,51,134,134,51,51,51,51,51,51,51,51,51,51,134,134,51,134,51,51,51,134,
        134,51,53,53,53,53,53,53,53,134,134,53,53,53,53,53,53,53,53,53,53,134,134,53,134,53,53,53,
        134,134,53,55,55,55,55,55,55,134,134,55,55,55,55,55,55,55,55,55,55,134,134,55,134,55,55,55,
        134,134,55,57,57,57,57,57,134,134,57,57,57,57,57,57,57,57,57,57,134,134,57,134,57,57,57,
        134,134,57,59,59,59,59,134,134,59,59,59,59,59,59,59,59,59,59,134,134,59,134,59,59,59,62,62,
        59,134,62,62,62,62,62,62,62,62,62,62,134,134,62,134,62,62,62,134,134,62,65,65,65,65,65,65,
        65,67,67,67,67,67,67,67,74,134,74,74,74,74,74,74,74,74,74,74,134,134,74,74,74,74,74,74,74,
        74,74,74,134,134,74,134,74,74,74,134,134,74,79,79,79,79,79,79,79,134,134,79,79,79,79,79,79,
        79,79,79,79,134,134,79,134,79,79,79,134,134,79,81,81,81,81,81,81,134,134,81,81,81,81,81,81,
        81,81,81,81,134,134,81,134,81,81,81,134,134,81,83,83,83,83,83,134,134,83,83,83,83,83,83,83,
        83,83,83,134,134,83,134,83,83,83,134,134,83,85,85,85,85,134,134,85,85,85,85,85,85,85,85,85,
        85,134,134,85,134,85,85,85,134,96,85,96,96,96,96,96,96,96,96,96,96,134,134,96,96,96,96,96,
        96,96,96,96,96,134,134,96,134,96,96,96,134,134,96,100,100,100,100,100,100,134,134,100,100,
        100,100,100,100,100,100,100,100,134,134,100,134,100,100,100,134,134,100,103,103,103,103,
        134,134,103,103,103,103,103,103,103,103,103,103,134,134,103,134,103,103,103,134,108,103,
        108,108,108,108,108,108,108,108,108,108,134,134,108,108,108,108,108,108,108,108,108,108,
        134,134,108,134,108,108,108,108,110,108,110,110,110,110,110,110,110,110,110,110,134,134,
        110,110,110,110,110,110,110,110,110,110,134,134,110,134,110,110,110,110,134,110,116,116,
        116,116,116,116,134,134,116,116,116,116,116,116,116,116,116,116,134,134,116,134,116,116,
        116,134,134,116
    ];
    const ubyte[]  goto_data =
    [
        133,47,48,77,78,99,111,102,112,61,87,64,120,122,70,71,72,73,42,43,22,23,40,41,69,47,89,29,
        91,105,106,47,47,107,132,61,87,64,94,95,70,71,72,73,42,43,22,23,40,41,119,131,89,47,91,105,
        106,120,121,107,19,42,43,22,23,40,41,21,22,23,40,41,34,123,134,126,134,134,134,134,127,128,
        44,134,48,77,78,99,111,102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,
        134,91,105,106,134,134,107,37,42,43,22,23,40,41,39,22,23,40,41,50,78,99,111,102,112,61,87,
        64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,107,52,99,111,
        102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,
        107,54,111,102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,
        106,134,134,107,56,102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,
        91,105,106,134,134,107,58,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,
        134,91,105,106,134,134,107,60,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,
        134,91,105,106,63,64,107,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,
        134,107,66,42,43,22,23,40,41,68,42,43,22,23,40,41,75,134,48,77,78,99,111,102,112,61,87,64,
        134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,107,80,111,102,112,
        61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,107,82,
        102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,
        107,84,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,
        134,107,86,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,97,
        107,48,77,78,99,111,102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,
        91,105,106,134,134,107,101,102,112,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,
        89,134,91,105,106,134,134,107,104,61,87,64,134,134,70,71,72,73,42,43,22,23,40,41,134,134,
        89,134,91,105,106,134,109,107,48,77,78,99,111,102,112,61,87,64,134,134,70,71,72,73,42,43,
        22,23,40,41,134,134,89,134,91,105,106,114,109,107,48,77,78,99,111,102,112,61,87,64,134,134,
        70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,113,134,107,117,102,112,61,87,64,
        134,134,70,71,72,73,42,43,22,23,40,41,134,134,89,134,91,105,106,134,134,107
    ];

    debug(parser) string indent;
    
    this(GLRParser ws=null, uint tab_width=4)
    {
        super(ws, tab_width);
        lexer = &mainLexer;
        first_nt = 54;
        nt_names =
        [
            "Expr","ExprTerminator","OrExpr","AndExpr","EqualityExpr","RelationalExpr",
            "AdditiveExpr","MulExpr","UnaryExpr","UnionExpr","PathExpr","FilterExpr","Predicate",
            "PredicateList","LocationPath","AbsoluteLocationPath","AbbreviatedAbsoluteLocationPath",
            "RelativeLocationPath","AbbreviatedRelativeLocationPath","Step","AbbreviatedStep",
            "AxisSpecifier","AxisName","AbbreviatedAxisSpecifier","NodeTest","NodeType","Literal",
            "NameTest","PrimaryExpr","VarRef","FuncCall","ExprList","QName","NCName","VarAccess",
            "!LRstart"
        ];
        lexeme_names =
        [
            "EOS","[,}]","or","and","=","!=","\\<","\\>","\\<=","\\>=","\\+","\\-","\\*","div",
            "mod","\\|","/","//","\\[","\\]","\\.","\\.\\.","ancestor::","ancestor\\-or\\-self",
            "attribute::","child::","descendant::","descendant\\-or\\-self","following::",
            "following\\-sibling","namespace::","parent::","preceding::","preceding\\-sibling",
            "self::","@","\\(","\\)","processing\\-instruction","comment","text","node",
            "\"[^\"]*\"","'[^']*'",":\\*","[0-9]+","[0-9]+\\.[0-9]+","\\$",",",":",
            "[A-Z_a-z0xC0-0xEFFFF][A-Za-z0-9\\-_0xC0-0xEFFFF]*"
        ];
        entry_infos =
        [
            cast(EntryInfo[])[EntryInfo(66,0)],[EntryInfo(22,1),EntryInfo(66,0)],[EntryInfo(38,1),EntryInfo(39,1)
            ,EntryInfo(66,0)],[EntryInfo(48,1)],[EntryInfo(49,1)],[EntryInfo(52,1)],[EntryInfo(53,1)],[
            EntryInfo(54,1)],[EntryInfo(55,1)],[EntryInfo(56,1)],[EntryInfo(57,1)],[EntryInfo(58,1)],[
            EntryInfo(59,1)],[EntryInfo(60,1)],[EntryInfo(61,1)],[EntryInfo(62,1)],[EntryInfo(63,1)],[
            EntryInfo(64,1)],[EntryInfo(65,1)],[EntryInfo(38,2),EntryInfo(43,1),EntryInfo(45,1)],[EntryInfo(43,2)
            ,EntryInfo(66,0)],[EntryInfo(43,3)],[EntryInfo(47,1)],[EntryInfo(46,1)],[EntryInfo(76,1)],[
            EntryInfo(69,1),EntryInfo(72,1)],[EntryInfo(69,2)],[EntryInfo(74,1)],[EntryInfo(75,1)],[
            EntryInfo(69,3)],[EntryInfo(69,4)],[EntryInfo(70,1)],[EntryInfo(71,1)],[EntryInfo(73,1)],[
            EntryInfo(46,2),EntryInfo(35,0)],[EntryInfo(32,1),EntryInfo(66,0)],[EntryInfo(41,1),EntryInfo(66,0)],[
            EntryInfo(41,2),EntryInfo(43,1),EntryInfo(45,1)],[EntryInfo(45,2),EntryInfo(66,0)],[EntryInfo(45,3)],[
            EntryInfo(50,1)],[EntryInfo(51,1)],[EntryInfo(44,1)],[EntryInfo(42,1)],[EntryInfo(32,2),EntryInfo(1,1)],[
            EntryInfo(2,1)],[EntryInfo(32,3)],[EntryInfo(1,2)],[EntryInfo(0,1),EntryInfo(4,1)],[EntryInfo(4,2)
            ,EntryInfo(66,0)],[EntryInfo(4,3),EntryInfo(6,1)],[EntryInfo(6,2),EntryInfo(66,0)],[EntryInfo(6,3)
            ,EntryInfo(8,1),EntryInfo(9,1)],[EntryInfo(8,2),EntryInfo(66,0)],[EntryInfo(8,3),EntryInfo(11,1)
            ,EntryInfo(12,1),EntryInfo(13,1),EntryInfo(14,1)],[EntryInfo(11,2),EntryInfo(66,0)],[EntryInfo(11,3)
            ,EntryInfo(15,1),EntryInfo(16,1)],[EntryInfo(15,2),EntryInfo(66,0)],[EntryInfo(15,3),EntryInfo(18,1)
            ,EntryInfo(19,1),EntryInfo(20,1)],[EntryInfo(18,2),EntryInfo(66,0)],[EntryInfo(18,3)],[EntryInfo(23,1)
            ,EntryInfo(25,1)],[EntryInfo(25,2),EntryInfo(66,0)],[EntryInfo(25,3)],[EntryInfo(27,1),EntryInfo(28,1)
            ,EntryInfo(29,1),EntryInfo(31,1)],[EntryInfo(28,2),EntryInfo(66,0)],[EntryInfo(28,3),EntryInfo(43,1)
            ,EntryInfo(45,1)],[EntryInfo(29,2),EntryInfo(66,0)],[EntryInfo(29,3),EntryInfo(43,1),EntryInfo(45,1)],[
            EntryInfo(31,2)],[EntryInfo(26,1)],[EntryInfo(37,1)],[EntryInfo(40,1)],[EntryInfo(36,1),EntryInfo(43,1)
            ,EntryInfo(45,1)],[EntryInfo(84,1),EntryInfo(66,0)],[EntryInfo(84,2),EntryInfo(1,1)],[EntryInfo(84,3)],[
            EntryInfo(3,1),EntryInfo(6,1)],[EntryInfo(5,1),EntryInfo(8,1),EntryInfo(9,1)],[EntryInfo(9,2)
            ,EntryInfo(66,0)],[EntryInfo(9,3),EntryInfo(11,1),EntryInfo(12,1),EntryInfo(13,1),EntryInfo(14,1)],[
            EntryInfo(12,2),EntryInfo(66,0)],[EntryInfo(12,3),EntryInfo(15,1),EntryInfo(16,1)],[EntryInfo(16,2)
            ,EntryInfo(66,0)],[EntryInfo(16,3),EntryInfo(18,1),EntryInfo(19,1),EntryInfo(20,1)],[EntryInfo(19,2)
            ,EntryInfo(66,0)],[EntryInfo(19,3)],[EntryInfo(24,1)],[EntryInfo(79,1)],[EntryInfo(81,1)],[
            EntryInfo(80,1)],[EntryInfo(30,1)],[EntryInfo(85,1)],[EntryInfo(92,1)],[EntryInfo(95,1)],[
            EntryInfo(85,2),EntryInfo(93,1),EntryInfo(94,1)],[EntryInfo(94,2),EntryInfo(66,0)],[EntryInfo(94,3)
            ,EntryInfo(1,1)],[EntryInfo(94,4)],[EntryInfo(7,1),EntryInfo(11,1),EntryInfo(12,1),EntryInfo(13,1)
            ,EntryInfo(14,1)],[EntryInfo(13,2),EntryInfo(66,0)],[EntryInfo(13,3),EntryInfo(15,1),EntryInfo(16,1)],[
            EntryInfo(17,1),EntryInfo(18,1),EntryInfo(19,1),EntryInfo(20,1)],[EntryInfo(20,2),EntryInfo(66,0)],[
            EntryInfo(20,3)],[EntryInfo(83,1)],[EntryInfo(82,1)],[EntryInfo(86,1)],[EntryInfo(86,2),EntryInfo(89,0)
            ,EntryInfo(66,0)],[EntryInfo(87,1),EntryInfo(88,1),EntryInfo(1,1)],[EntryInfo(87,2),EntryInfo(89,0)
            ,EntryInfo(66,0)],[EntryInfo(10,1),EntryInfo(15,1),EntryInfo(16,1)],[EntryInfo(21,1)],[EntryInfo(87,3)],[
            EntryInfo(86,3)],[EntryInfo(86,4)],[EntryInfo(14,2),EntryInfo(66,0)],[EntryInfo(14,3),EntryInfo(15,1)
            ,EntryInfo(16,1)],[EntryInfo(93,2)],[EntryInfo(93,3)],[EntryInfo(33,1),EntryInfo(34,1),EntryInfo(35,0)],[
            EntryInfo(33,2)],[EntryInfo(46,3)],[EntryInfo(68,1)],[EntryInfo(68,2)],[EntryInfo(68,3)],[
            EntryInfo(67,1)],[EntryInfo(78,1)],[EntryInfo(77,1),EntryInfo(90,1),EntryInfo(91,1)],[EntryInfo(77,2)],[
            EntryInfo(91,2)],[EntryInfo(91,3)],[EntryInfo(22,2)],[EntryInfo(96,1),EntryInfo(1,1)]
        ];
        rule_infos =
        [
            RuleInfo(true,1,1,0,[4098]),RuleInfo(true,2,2,0,[4096,4097]),RuleInfo(true,1,0,1,[4]),
            RuleInfo(true,1,1,2,[4099]),RuleInfo(true,3,2,2,[4098,5,4099]),RuleInfo(true,1,1,3,[4100]),
            RuleInfo(true,3,2,3,[4099,6,4100]),RuleInfo(true,1,1,4,[4101]),RuleInfo(true,3,2,4,[4100,7,4101]),
            RuleInfo(true,3,2,4,[4100,8,4101]),RuleInfo(true,1,1,5,[4102]),RuleInfo(true,3,2,5,[4101,9,4102]),
            RuleInfo(true,3,2,5,[4101,10,4102]),RuleInfo(true,3,2,5,[4101,11,4102]),
            RuleInfo(true,3,2,5,[4101,12,4102]),RuleInfo(true,3,2,6,[4102,13,4103]),
            RuleInfo(true,3,2,6,[4102,14,4103]),RuleInfo(true,1,1,6,[4103]),RuleInfo(true,3,2,7,[4103,15,4104]),
            RuleInfo(true,3,2,7,[4103,16,4104]),RuleInfo(true,3,2,7,[4103,17,4104]),RuleInfo(true,1,1,7,[4104]),
            RuleInfo(true,2,1,8,[14,4104]),RuleInfo(true,1,1,8,[4105]),RuleInfo(true,1,1,9,[4106]),
            RuleInfo(true,3,2,9,[4105,18,4106]),RuleInfo(true,1,1,10,[4110]),RuleInfo(true,1,1,10,[4107]),
            RuleInfo(true,3,2,10,[4107,19,4113]),RuleInfo(true,3,2,10,[4107,20,4113]),
            RuleInfo(true,1,1,11,[4124]),RuleInfo(true,2,2,11,[4107,4108]),RuleInfo(true,3,1,12,[21,4096,22]),
            RuleInfo(true,2,2,13,[4108,4109]),RuleInfo(true,1,1,13,[4108]),RuleInfo(true,0,0,13,[]),
            RuleInfo(true,1,1,14,[4113]),RuleInfo(true,1,1,14,[4111]),RuleInfo(true,2,1,15,[19,4113]),
            RuleInfo(true,1,0,15,[19]),RuleInfo(true,1,1,15,[4112]),RuleInfo(true,2,1,16,[20,4113]),
            RuleInfo(true,1,1,17,[4115]),RuleInfo(true,3,2,17,[4113,19,4115]),RuleInfo(true,1,1,17,[4114]),
            RuleInfo(true,3,2,18,[4113,20,4115]),RuleInfo(true,3,3,19,[4117,4120,4109]),
            RuleInfo(true,1,1,19,[4116]),RuleInfo(true,1,0,20,[23]),RuleInfo(true,1,0,20,[24]),
            RuleInfo(true,1,1,21,[4118]),RuleInfo(true,1,1,21,[4119]),RuleInfo(true,1,0,22,[25]),
            RuleInfo(true,1,0,22,[26]),RuleInfo(true,1,0,22,[27]),RuleInfo(true,1,0,22,[28]),
            RuleInfo(true,1,0,22,[29]),RuleInfo(true,1,0,22,[30]),RuleInfo(true,1,0,22,[31]),
            RuleInfo(true,1,0,22,[32]),RuleInfo(true,1,0,22,[33]),RuleInfo(true,1,0,22,[34]),
            RuleInfo(true,1,0,22,[35]),RuleInfo(true,1,0,22,[36]),RuleInfo(true,1,0,22,[37]),
            RuleInfo(true,1,0,23,[38]),RuleInfo(true,0,0,23,[]),RuleInfo(true,1,1,24,[4123]),
            RuleInfo(true,3,1,24,[4121,39,40]),RuleInfo(true,4,1,24,[41,39,4122,40]),RuleInfo(true,1,0,25,[42]),
            RuleInfo(true,1,0,25,[43]),RuleInfo(true,1,0,25,[41]),RuleInfo(true,1,0,25,[44]),
            RuleInfo(true,1,0,26,[45]),RuleInfo(true,1,0,26,[46]),RuleInfo(true,1,0,27,[15]),
            RuleInfo(true,2,1,27,[4129,47]),RuleInfo(true,1,1,27,[4128]),RuleInfo(true,1,0,28,[48]),
            RuleInfo(true,1,0,28,[49]),RuleInfo(true,1,1,28,[4122]),RuleInfo(true,1,1,28,[4126]),
            RuleInfo(true,1,1,28,[4125]),RuleInfo(true,3,1,28,[39,4096,40]),RuleInfo(true,2,1,29,[50,4130]),
            RuleInfo(true,4,2,30,[4129,39,4127,40]),RuleInfo(true,3,2,31,[4096,51,4127]),
            RuleInfo(true,1,1,31,[4096]),RuleInfo(true,0,0,31,[]),RuleInfo(true,1,1,32,[4129]),
            RuleInfo(true,3,2,32,[4129,52,4129]),RuleInfo(true,1,0,33,[53]),
            RuleInfo(true,3,2,34,[4130,23,4129]),RuleInfo(true,4,2,34,[4130,21,4096,22]),
            RuleInfo(true,1,1,34,[4129]),RuleInfo(true,1,1,35,[4096])
        ];
        error_message_lists = [
            cast(string[])null
        ];
    }

    uint[] lookaheadForNT(uint nt_index, uint state)
    {
        uint[] tokens;
        auto b = action_base[state];
        auto m = APDmin(action_check.length, cast(size_t)b+first_nt);
        foreach ( i, check; action_check[b .. m] )
        {
            if ( check == state && (action_data[b+i] & 768) == 512 )
                tokens ~= i+EOS;
        }
        return tokens;
    }

    override bool isErrorSynced(uint state)
    {
        switch ( state )
        {
            case 0:
                return true;
            default:
                break;
        }
        return false;
    }

    override bool parse(string input)
    {
        debug(parser) indent ~= " ";
        //scope(exit) debug(parser) indent = indent[0..$-1];

        bool    fatal_errors = true;
        uint    line = 1,
                column = 1,
                symbol;

        void reduce(uint rule)
        {
            version(Tango)
                debug(parser) Stdout.format("{}reduce {} {}\n", indent, rule, ruleToString(&rule_infos[rule], -1));
            else
                debug(parser) writefln("%sreduce %d %s", indent, rule, ruleToString(&rule_infos[rule], -1));
            auto ri = &rule_infos[rule];
            uint    reduce_line,
                    reduce_column;
            if ( ri.symbol_count > 0 ) {
                reduce_line = stack.array[$-ri.symbol_count].line;
                reduce_column = stack.array[$-ri.symbol_count].column;
                stack.pop(ri.symbol_count);
            }
            else {
                reduce_line = stack.top.line;
                reduce_column = stack.top.column;
            }

            auto b = goto_base[stack.top.index];
            b += ri.nt_index;
            debug(parser)
            {
                if ( b < goto_check.length && goto_check[b] == stack.top.index ) {
                    stack ~= LRState(goto_data[b], reduce_line, reduce_column);

                version(Tango)
                    Stdout.format("{}goto {}\n", indent, stack.top.index);
                else
                    writefln("%sgoto %d", indent, stack.top.index);
                }
                else
                    assert(0);
            }
            else
                stack ~= LRState(goto_data[b], reduce_line, reduce_column);
            if ( ri.ast_node ) {
                debug createNode(reduce_line, reduce_column, rule, ri.nt_count, ri.nt_index);
                else createNode(reduce_line, reduce_column, rule, ri.nt_count);
            }
            else if ( ri.nt_count > 0 )
                node_stack.pop(ri.nt_count);
        }

        void branch(uint action)
        {
            version(ProfileConflicts)
            {
                if ( branch_stack.length > branch_stack_max )
                    branch_stack_max = branch_stack.length;
            }
            if ( (action & 256) > 0 )
            {
                version(ProfileConflicts)
                    sr_conflict_counts[stack.top.index]++;
                version(Tango) debug(parser) Stdout.format("{}branch shift conflict\n", indent);
                else debug(parser) writefln("%sbranch shift conflict", indent);
            }
            else
            {
                version(ProfileConflicts)
                    rr_conflict_counts[stack.top.index]++;
                version(Tango) debug(parser) Stdout.format("{}branch reduce conflict\n", indent);
                else debug(parser) writefln("%sbranch reduce conflict", indent);
            }
            version(ProfileConflicts)
                branch_stack ~= LRBranch(
                    stack.dup, node_stack.dup,
                    input, lookahead, lookahead_ws,
                    line, column, symbol, fatal_errors, 
                    action, stack.top.index | (action & 768)
                );
            else
                branch_stack ~= LRBranch(
                    stack.dup, node_stack.dup,
                    input, lookahead, lookahead_ws,
                    line, column, symbol, fatal_errors, 
                    action
                );
            fatal_errors = false;
        }

        string prev_input = input;
        parseLoop: while ( true )
        {
            if ( symbol == 0 )
            {
            readSymbol:
                match = lookahead;
                match_ws = lookahead_ws;
                lookahead_ws = input;
                static if ( is(WhitespaceGrammar : GLRParser) )
                    ws_parser.parseWS(input);
                version(Tango)
                    debug(lexer) Stdout.format("WS: '{}'\n", lookahead_ws[0 .. $-input.length]);
                else
                    debug(lexer) writefln("WS: '%s'", lookahead_ws[0 .. $-input.length]);
                symbol = EOS;
                if ( input.length == 0 )
                    lookahead = null;
                else if ( lexer(input, symbol, lookahead) ) {
                    symbol += FIRST_TOKEN;
                    line += countLocation(lookahead_ws[0 .. $-input.length], column);
                    lookahead_ws = lookahead_ws[0 .. $-input.length+lookahead.length];
                }
                if ( symbol == 0 )
                    throw new ParserException(line, column, filename, "Invalid token", input[0..$>MAX_INPUT_DUMP?MAX_INPUT_DUMP:$]);
                prev_input = input;
                input = input[lookahead.length..$];
            }
            debug(parser)
            {
                string node_stack_str;
                foreach ( n; node_stack.array )
                    node_stack_str ~= " "~n.node._ST_node_name~(n.sync?"*":"");
                version(Tango)
                    Stdout.format("\n{}state {}\n{}nodes {}\n{}lkahd ({}) {}\n{}input ({}:{}) {}\n",
                        indent, stack.top.index,
                        indent, node_stack_str,
                        indent, symbol, lookahead,
                        indent, line, column,
                        substitute(substitute(input[0..$>MAX_INPUT_DUMP?MAX_INPUT_DUMP:$], "\r", "\\r"), "\n", "\\n")
                    );
                else
                    writefln("\n%sstate %d\n%snodes %s\n%slkahd (%d) %s\n%sinput (%d:%d) %s",
                        indent, stack.top.index,
                        indent, node_stack_str,
                        indent, symbol, lookahead,
                        indent, line, column,
                        replace(replace(input[0..$>MAX_INPUT_DUMP?MAX_INPUT_DUMP:$], "\r", "\\r"), "\n", "\\n")
                    );
            }

            auto state = stack.top.index;
            auto b = action_base[state];
            uint action = 768;
            b += symbol-EOS;
            if ( b < action_check.length && action_check[b] == state )
                action = action_data[b];

            actionSwitch: switch ( action & 768 )
            {
                case 256:
                    action &= 255;
                    version(Tango) debug(parser) Stdout.format("{}shift {}\n", indent, action);
                    else debug(parser) writefln("%sshift %d", indent, action);
                    stack ~= LRState(action, line, column);
                    symbol = 0;
                    continue parseLoop;
                case 512:
                    action &= 255;
                    version(Tango) debug(parser) Stdout.format("{}reduce {} {}\n", indent, action, ruleToString(&rule_infos[action], -1));
                    else debug(parser) writefln("%sreduce %d %s", indent, action, ruleToString(&rule_infos[action], -1));
                    auto ri = &rule_infos[action];
                    uint    reduce_line,
                            reduce_column;
                    if ( ri.symbol_count > 0 ) {
                        reduce_line = stack.array[$-ri.symbol_count].line;
                        reduce_column = stack.array[$-ri.symbol_count].column;
                        stack.pop(ri.symbol_count);
                    }
                    else {
                        reduce_line = stack.array[$-1].line;
                        reduce_column = stack.array[$-1].column;
                    }

                    state = stack.top.index;
                    b = goto_base[state];
                    b += ri.nt_index;
                    debug(parser)
                    {
                        if ( b < goto_check.length && goto_check[b] == state ) {
                            stack ~= LRState(goto_data[b], reduce_line, reduce_column);
                        version(Tango)
                            Stdout.format("{}goto {}\n", indent, stack.top.index);
                        else
                            writefln("%sgoto %d", indent, stack.top.index);
                        }
                        else
                            assert(0);
                    }
                    else
                        stack ~= LRState(goto_data[b], reduce_line, reduce_column);
                    if ( ri.ast_node ) {
                        debug createNode(reduce_line, reduce_column, action, ri.nt_count, ri.nt_index);
                        else createNode(reduce_line, reduce_column, action, ri.nt_count);
                    }
                    else if ( ri.nt_count > 0 )
                        node_stack.pop(ri.nt_count);

                    continue parseLoop;
                case 768:
                    action &= 255;
                    if ( fatal_errors || action > 0 )
                    {
                        if ( recover_from_errors )
                        {
                            try error(prev_input, line, column, action, symbol);
                            catch ( ParserException e )
                                recovered_errors ~= e;
                            version(Tango)
                                debug(nonfatal) Stdout.format("recovering from error:\n{}\n", recovered_errors[$-1]);
                            else
                                debug(nonfatal) writefln("recovering from error:\n%s", recovered_errors[$-1]);
                            while ( !stack.empty && !isErrorSynced(stack.top.index) )
                                stack.pop;
                            while ( !node_stack.empty && !node_stack.top.sync )
                                node_stack.pop;
                            symbol = 0;
                            continue parseLoop;
                        }
                        else {
                            input = prev_input;
                            error(input, line, column, action, symbol);
                        }
                    }
                    else
                    {
                        debug(nonfatal) {
                            input = prev_input;
                            error(input, line, column, action, symbol, false);
                        }
                    }
                    if ( branch_stack.length == 0 ) {
                        input = prev_input;
                        return false;
                    }
                    auto prev = branch_stack.popPtr;
                    stack           = prev.stack;
                    node_stack      = prev.node_stack;
                    input           = prev.input;
                    prev_input      = input;
                    lookahead       = prev.lookahead;
                    lookahead_ws    = prev.lookahead_ws;
                    line            = prev.line;
                    column          = prev.column;
                    symbol          = prev.symbol;
                    fatal_errors    = prev.fatal_errors;
                    action          = prev.action;

                    version(ProfileConflicts)
                    {
                        if ( (prev.last_conflict & 256) > 0 )
                            shift_failed_counts[prev.last_conflict & 255]++;
                        else
                            reduce_failed_counts[prev.last_conflict & 255]++;
                    }
                    goto actionSwitch;
                default:
                    break;
            }

            switch ( action )
            {
                case 0:
                    branch(578);
                    version(Tango)
                        debug(parser) Stdout.format("{}shift 93\n", indent);
                    else
                        debug(parser) writefln("%sshift 93", indent);
                    stack ~= LRState(93, line, column);
                    symbol = 0;
                    break;
                case 1:
                    branch(578);
                    reduce(39);
                    break;
                case 2:
                    branch(584);
                    version(Tango)
                        debug(parser) Stdout.format("{}shift 26\n", indent);
                    else
                        debug(parser) writefln("%sshift 26", indent);
                    stack ~= LRState(26, line, column);
                    symbol = 0;
                    break;
                case 3:
                    branch(597);
                    version(Tango)
                        debug(parser) Stdout.format("{}shift 96\n", indent);
                    else
                        debug(parser) writefln("%sshift 96", indent);
                    stack ~= LRState(96, line, column);
                    symbol = 0;
                    break;
                case 4:
                    branch(547);
                    reduce(34);
                    break;
                case 5:
                    version(Tango)
                        debug(parser) Stdout.format("{}accept\n", indent);
                    else
                        debug(parser) writefln("%saccept", indent);
                    syntax_root = node_stack.top.node;
                    input = prev_input;
                    return true;
                default:
                    assert(0);
            }
        }
        assert(0);
    }
}

class WhitespaceGrammar : public GLRParser
{
    const ubyte[]  action_base =
    [
        0,0,2
    ];
    const ubyte[]  action_check =
    [
        1,0,2
    ];
    const ubyte[]  action_data =
    [
        4,3,0
    ];
    const ubyte[]  goto_base =
    [
        0,0,0
    ];
    const ubyte[]  goto_check =
    [
        0
    ];
    const ubyte[]  goto_data =
    [
        2
    ];

    debug(parser) string indent;
    
    this(GLRParser ws=null, uint tab_width=4)
    {
        super(ws, tab_width);
        lexer = &wsLexer;
        first_nt = 5;
        nt_names =
        [
            "Whitespace","!LRstart"
        ];
        lexeme_names =
        [
            "EOS","[ \\t\\n\\r]+"
        ];
        entry_infos =
        [
            cast(EntryInfo[])[],[EntryInfo(0,1)],[EntryInfo(1,1)]
        ];
        rule_infos =
        [
            RuleInfo(true,1,0,0,[4]),RuleInfo(true,1,1,1,[4096])
        ];
        error_message_lists = [
            cast(string[])null
        ];
    }

    uint[] lookaheadForNT(uint nt_index, uint state)
    {
        uint[] tokens;
        auto b = action_base[state];
        auto m = APDmin(action_check.length, cast(size_t)b+first_nt);
        foreach ( i, check; action_check[b .. m] )
        {
            if ( check == state && (action_data[b+i] & 6) == 4 )
                tokens ~= i+EOS;
        }
        return tokens;
    }

    override bool isErrorSynced(uint state)
    {
        switch ( state )
        {
            case 0:
                return true;
            default:
                break;
        }
        return false;
    }

    override bool parseWS(ref string input)
    {
        stack.clear;
        stack ~= LRState(0, 1, 1);

        debug(parser) indent ~= " ";
        //scope(exit) debug(parser) indent = indent[0..$-1];

        bool    fatal_errors = true;
        uint    line = 1,
                column = 1,
                symbol;

        void reduce(uint rule)
        {
            version(Tango)
                debug(parser) Stdout.format("{}reduce {} {}\n", indent, rule, ruleToString(&rule_infos[rule], -1));
            else
                debug(parser) writefln("%sreduce %d %s", indent, rule, ruleToString(&rule_infos[rule], -1));
            auto ri = &rule_infos[rule];
            uint    reduce_line,
                    reduce_column;
            if ( ri.symbol_count > 0 ) {
                reduce_line = stack.array[$-ri.symbol_count].line;
                reduce_column = stack.array[$-ri.symbol_count].column;
                stack.pop(ri.symbol_count);
            }
            else {
                reduce_line = stack.top.line;
                reduce_column = stack.top.column;
            }

            auto b = goto_base[stack.top.index];
            b += ri.nt_index;
            debug(parser)
            {
                if ( b < goto_check.length && goto_check[b] == stack.top.index ) {
                    stack ~= LRState(goto_data[b], reduce_line, reduce_column);
                }
                else
                    assert(0);
            }
            else
                stack ~= LRState(goto_data[b], reduce_line, reduce_column);
        }

        void branch(uint action)
        {
            version(ProfileConflicts)
            {
                if ( branch_stack.length > branch_stack_max )
                    branch_stack_max = branch_stack.length;
            }
            if ( (action & 2) > 0 )
            {
                version(ProfileConflicts)
                    sr_conflict_counts[stack.top.index]++;
            }
            else
            {
                version(ProfileConflicts)
                    rr_conflict_counts[stack.top.index]++;
            }
            version(ProfileConflicts)
                branch_stack ~= LRBranch(
                    stack.dup, node_stack.dup,
                    input, lookahead, lookahead_ws,
                    line, column, symbol, fatal_errors, 
                    action, stack.top.index | (action & 6)
                );
            else
                branch_stack ~= LRBranch(
                    stack.dup, node_stack.dup,
                    input, lookahead, lookahead_ws,
                    line, column, symbol, fatal_errors, 
                    action
                );
            fatal_errors = false;
        }

        string prev_input = input;
        parseLoop: while ( true )
        {
            if ( symbol == 0 )
            {
            readSymbol:
                match = lookahead;
                match_ws = lookahead_ws;
                symbol = EOS;
                if ( input.length == 0 )
                    lookahead = null;
                else if ( lexer(input, symbol, lookahead) ) {
                    symbol += FIRST_TOKEN;
                }
                if ( symbol == 0 )
                    return false;
                prev_input = input;
                input = input[lookahead.length..$];
            }

            auto state = stack.top.index;
            auto b = action_base[state];
            uint action = 6;
            b += symbol-EOS;
            if ( b < action_check.length && action_check[b] == state )
                action = action_data[b];

            actionSwitch: switch ( action & 6 )
            {
                case 2:
                    action &= 1;
                    stack ~= LRState(action, line, column);
                    symbol = 0;
                    continue parseLoop;
                case 4:
                    action &= 1;
                    auto ri = &rule_infos[action];
                    uint    reduce_line,
                            reduce_column;
                    if ( ri.symbol_count > 0 ) {
                        reduce_line = stack.array[$-ri.symbol_count].line;
                        reduce_column = stack.array[$-ri.symbol_count].column;
                        stack.pop(ri.symbol_count);
                    }
                    else {
                        reduce_line = stack.array[$-1].line;
                        reduce_column = stack.array[$-1].column;
                    }

                    state = stack.top.index;
                    b = goto_base[state];
                    b += ri.nt_index;
                    debug(parser)
                    {
                        if ( b < goto_check.length && goto_check[b] == state ) {
                            stack ~= LRState(goto_data[b], reduce_line, reduce_column);
                        }
                        else
                            assert(0);
                    }
                    else
                        stack ~= LRState(goto_data[b], reduce_line, reduce_column);

                    continue parseLoop;
                case 6:
                    action &= 1;
                    input = prev_input;
                    if ( branch_stack.length == 0 ) {
                        input = prev_input;
                        return false;
                    }
                    auto prev = branch_stack.popPtr;
                    stack           = prev.stack;
                    node_stack      = prev.node_stack;
                    input           = prev.input;
                    prev_input      = input;
                    lookahead       = prev.lookahead;
                    lookahead_ws    = prev.lookahead_ws;
                    line            = prev.line;
                    column          = prev.column;
                    symbol          = prev.symbol;
                    fatal_errors    = prev.fatal_errors;
                    action          = prev.action;

                    version(ProfileConflicts)
                    {
                        if ( (prev.last_conflict & 2) > 0 )
                            shift_failed_counts[prev.last_conflict & 1]++;
                        else
                            reduce_failed_counts[prev.last_conflict & 1]++;
                    }
                    goto actionSwitch;
                default:
                    break;
            }

            switch ( action )
            {
                case 0:
                    input = prev_input;
                    return true;
                default:
                    assert(0);
            }
        }
        assert(0);
    }
}


// generated code end
