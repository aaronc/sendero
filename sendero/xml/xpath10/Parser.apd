APDDeclaration
{
module sendero.xml.xpath10.Parser;

import sendero.xml.xpath10.Expression;
import sendero_base.xml.XmlNode;

debug import tango.io.Stdout;
import Integer = tango.text.convert.Integer;
import Float = tango.text.convert.Float;

public import sendero_base.Core;
import sendero_base.Set;
import sendero.vm.Expression;
	

version(TestApaged)
{
	import sendero.util.LocalText;

    void main(string[] args)
    {
        if ( args.length < 2 )
            throw new Exception("Usage: arithmetic <expression>");
        SyntaxTree* root;
        if ( parse("", args[1], root, true) ) {
            IExpression value;
            root.Expr(value);
            debug root.print;
			auto ctxt = new ExecutionContext;
			auto res = value.exec(ctxt);
			auto text = Message.renderParam(ctxt, res);
            Stdout.format("{} = {}\n", args[1], text);
        }
        else
        {
            Stdout.format("Invalid expression: {}\n", args[1]);
        }
    }
}

}

Whitespace
{
    regexp("[ \\t\\n\\r]+");
}

Expr(inout IExpression expr, XPathContext ctxt)
{
	OrExpr
	{
		OrExpr(expr);
	}
	
	Expr ExprTerminator
	{
		Expr(expr);
	}
}

ExprTerminator()
{
	regexp("[,\}]");
}

OrExpr(inout IExpression expr, XPathContext ctxt)
{
	AndExpr
	{
		AndExpr(expr);
	}
	
	OrExpr "or" AndExpr
	{
		IExpression x, y;
		OrExpr(x); AndExpr(y);
		expr = new LogicalOp!("||")(x, y);
	}
}

AndExpr(inout IExpression expr, XPathContext ctxt)
{
	EqualityExpr
	{
		EqualityExpr(expr);
	}
	
	AndExpr "and" EqualityExpr
	{
		IExpression x, y;
		AndExpr(x); EqualityExpr(y);
		expr = new LogicalOp!("&&")(x, y);
	}
}

EqualityExpr(inout IExpression expr, XPathContext ctxt)
{
	RelationalExpr
	{
		RelationalExpr(expr);
	}
	
	EqualityExpr "=" RelationalExpr
	{
		IExpression x, y;
		EqualityExpr(x); RelationalExpr(y);
		expr = new EqOp!("==")(x, y);
	}
	
	EqualityExpr "!=" RelationalExpr
	{
		IExpression x, y;
		EqualityExpr(x); RelationalExpr(y);
		expr = new EqOp!("!=")(x, y);
	}
}

RelationalExpr(inout IExpression expr, XPathContext ctxt)
{
	AdditiveExpr
	{
		AdditiveExpr(expr);
	}
	
	RelationalExpr "<" AdditiveExpr	
	{
		IExpression x, y;
		RelationalExpr(x); AdditiveExpr(y);
		expr = new CmpOp!("<")(x, y);
	}
	
	RelationalExpr ">" AdditiveExpr	
	{
		IExpression x, y;
		RelationalExpr(x); AdditiveExpr(y);
		expr = new CmpOp!(">")(x, y);
	}
	
	RelationalExpr "<=" AdditiveExpr
	{
		IExpression x, y;
		RelationalExpr(x); AdditiveExpr(y);
		expr = new CmpOp!("<=")(x, y);
	}
	
	RelationalExpr ">=" AdditiveExpr
	{
		IExpression x, y;
		RelationalExpr(x); AdditiveExpr(y);
		expr = new CmpOp!(">=")(x, y);
	}
}

AdditiveExpr(inout IExpression expr, XPathContext ctxt)
{
    AdditiveExpr "+" MulExpr
    {
    	IExpression x, y;
		AdditiveExpr(x); MulExpr(y);
		expr = new BinaryOp!("+")(x, y);
    }

    AdditiveExpr "-" MulExpr
    {
    	IExpression x, y;
		AdditiveExpr(x); MulExpr(y);
		expr = new BinaryOp!("-")(x, y);
    }

    MulExpr
    { MulExpr(expr); }
}

MulExpr(inout IExpression expr, XPathContext ctxt)
{
    MulExpr "*" UnaryExpr
    {
    	IExpression x, y;
		MulExpr(x); UnaryExpr(y);
		expr = new BinaryOp!("*")(x, y);
    }
	
	MulExpr "div" UnaryExpr
    {
    	IExpression x, y;
		MulExpr(x); UnaryExpr(y);
		expr = new BinaryOp!("/")(x, y);
    }
	
	MulExpr "mod" UnaryExpr
    {
    	IExpression x, y;
		MulExpr(x); UnaryExpr(y);
		expr = new BinaryOp!("%")(x, y);
    }

    UnaryExpr
    { UnaryExpr(expr); }
}


UnaryExpr(inout IExpression expr, XPathContext ctxt)
{
	"-" UnaryExpr
	{
		IExpression e;
        UnaryExpr(e);
        expr = new Negative(e);
	}

	UnionExpr
	{ UnionExpr(expr); }
}

UnionExpr(inout IExpression expr, XPathContext ctxt)
{
	PathExpr
	{
		PathExpr(expr);
	}
	
	UnionExpr = UExpr "|" PathExpr
	{
		IExpression expr1, expr2;
		UExpr(expr1);
		PathExpr(expr2);

		expr = new UnionExpr(expr1, expr2);
	}
}

PathExpr(inout IExpression expr, XPathContext ctxt)
{
	LocationPath
	{
		IStep step;
		LocationPath(step);
		expr = new XPathExpr!(false)(step);
	}
	
	FilterExpr
	{
		FilterExpr(expr);
	}
	
	FilterExpr "/" RelativeLocationPath
	{
		IExpression e;
		IStep step;
		
		FilterExpr(e);
		RelativeLocationPath(step);
		
		expr = new XPathExpr!(true)(step, e);
		//expr = new FunctionCall( &(new XPathExpressionFn!(true)(step, e)).exec, null );
	}
	
	FilterExpr "//" RelativeLocationPath
	{
		IExpression e;
		IStep step, step2;
		
		FilterExpr(e);
		RelativeLocationPath(step2);
		
		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		step.setNextStep(step2);
		expr = new XPathExpr!(true)(step, e);
		//expr = new FunctionCall( &(new XPathExpressionFn!(true)(step, e)).exec, null );
	
		/+IExpression e;
		IStep step, step2;
		
		FilterExpr(e);
		RelativeLocationPath(step2);
		
		expr.type = ExpressionT.FuncCall;
		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		step.setNextStep(step2);
		expr.func.func = new XPathExpressionFn!(true)(step);
		expr.func.params ~= e;+/
	}
}

FilterExpr(inout IExpression expr, XPathContext ctxt)
{
	PrimaryExpr
	{
		PrimaryExpr(expr);
	}
	
	FilterExpr Predicate
	{
		debug assert(false, "TODO");
	}
}


Predicate(inout IExpression expr)
{
	"[" Expr "]"
	{
		Expr(expr);
	}
}

PredicateList(inout PredicateTest[] predicates)
{
	Predicate PredicateList
	{
		IExpression expr;
		Predicate(expr);
		auto pred = new PredicateTest(expr);
		predicates ~= pred;
		PredicateTest[] plist;
		PredicateList(plist);
		predicates ~= plist;
		
	}
	
	Predicate
	{
		IExpression expr;
		Predicate(expr);
		auto pred = new PredicateTest(expr);
		predicates ~= pred;
	}
	
	epsilon;
}

LocationPath(inout IStep step)
{
	RelativeLocationPath
	{
		RelativeLocationPath(step);
	}
	
	AbsoluteLocationPath
	{
		AbsoluteLocationPath(step);
	}
}

AbsoluteLocationPath(inout IStep step)
{
	"/" RelativeLocationPath
	{
		RelativeLocationPath(step);
	}
	
	"/"
	{
		//step = new XPathStep!(Axis.self);
		//debug assert(false, "TODO");
		new XPathStep(&constructNodeSetViewer!(SelfAxisViewer));
	}
	
	AbbreviatedAbsoluteLocationPath
	{
		AbbreviatedAbsoluteLocationPath(step);
	}
}

AbbreviatedAbsoluteLocationPath(inout IStep step)
{
	"//" RelativeLocationPath
	{
		step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		IStep step2;
		RelativeLocationPath(step2);
		step.setNextStep = step2;
	}
}

RelativeLocationPath(inout IStep step)
{
	Step
	{
		Step(step);
	}
	
	RelativeLocationPath "/" Step
	{
		IStep step2;
		RelativeLocationPath(step);
		Step(step2);
		step.setNextStep = step2;
	}
	
	AbbreviatedRelativeLocationPath
	{
		AbbreviatedRelativeLocationPath(step);
	}
}

AbbreviatedRelativeLocationPath(inout IStep step)
{
	RelativeLocationPath "//" Step
	{
		IStep step2, step3;
		RelativeLocationPath(step);
		step2 = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer));
		Step(step3);
		step2.setNextStep = step3;
		step.setNextStep = step2;
	}
}

Step(inout IStep step)
{
	AxisSpecifier NodeTest PredicateList
	{
		Axis axis;
		AxisSpecifier(axis);
		ITest test;
		PredicateTest[] predicates;
		NodeTest(test);
		PredicateList(predicates);		
		
		switch(axis)
		{
		case Axis.ancestor:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer), test, predicates);
			break;
		case Axis.ancestor_or_self:
			step = new XPathStep(&constructNodeSetViewer!(AncestorOrSelfAxisViewer), test, predicates);
			break;
		case Axis.attribute:
			step = new XPathStep(&constructNodeSetViewer!(AttributeAxisViewer), test, predicates);
			break;
		case Axis.child:
			step = new XPathStep(&constructNodeSetViewer!(ChildAxisViewer), test, predicates);
			break;
		case Axis.descendant:
			step = new XPathStep(&constructNodeSetViewer!(DescendantAxisViewer), test, predicates);
			break;
		case Axis.descendant_or_self:
			step = new XPathStep(&constructNodeSetViewer!(DescendantOrSelfAxisViewer), test, predicates);
			break;
		case Axis.following:
			step = new XPathStep(&constructNodeSetViewer!(FollowingAxisViewer), test, predicates);
			break;
		case Axis.following_sibling:
			step = new XPathStep(&constructNodeSetViewer!(FollowingSiblingAxisViewer), test, predicates);
			break;
		case Axis.namespace:
			debug assert(false, "namespace axis deprecated");
			break;
		case Axis.parent:
			step = new XPathStep(&constructNodeSetViewer!(ParentAxisViewer), test, predicates);
			break;
		case Axis.preceding:
			step = new XPathStep(&constructNodeSetViewer!(PrecedingAxisViewer), test, predicates);
			break;
		case Axis.preceding_sibling:
			step = new XPathStep(&constructNodeSetViewer!(PrecedingSiblingAxisViewer), test, predicates);
			break;
		case Axis.self:
			step = new XPathStep(&constructNodeSetViewer!(SelfAxisViewer), test, predicates);
			break;
		default:
			debug assert(false);
		}
	}
	AbbreviatedStep
	{
		Axis axis;
		AbbreviatedStep(axis);
		switch(axis)
		{
		case Axis.parent:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer));
			break;
		case Axis.self:
			step = new XPathStep(&constructNodeSetViewer!(AncestorAxisViewer));
			break;
		default:
			debug assert(false);
		}
	}
}

AbbreviatedStep(out Axis axis)
{
	"."
	{
		axis = Axis.self;
	}
	".."
	{
		axis = Axis.parent;
	}
}

AxisSpecifier(out Axis axis)
{
	AxisName
	{
		AxisName(axis);
	}
	
	AbbreviatedAxisSpecifier
	{
		bool attr;
		AbbreviatedAxisSpecifier(attr);
		if(attr) axis = Axis.attribute;
		else axis = Axis.child;
	}
}

AxisName(out Axis axis)
{
	"ancestor::" { axis = Axis.ancestor; }	
	"ancestor-or-self" { axis = Axis.ancestor_or_self; }	
	"attribute::" { axis = Axis.attribute; }	
	"child::" { axis = Axis.child; }	
	"descendant::" { axis = Axis.descendant; }	
	"descendant-or-self" { axis = Axis.descendant_or_self; }	
	"following::" { axis = Axis.following; }	
	"following-sibling" { axis = Axis.following_sibling; }	
	"namespace::" { axis = Axis.namespace; }	
	"parent::" { axis = Axis.parent; }	
	"preceding::" { axis = Axis.preceding; }	
	"preceding-sibling" { axis = Axis.preceding_sibling; }	
	"self::" { axis = Axis.self; }
}

AbbreviatedAxisSpecifier(out bool attr)
{
	"@"
	{
		attr = true;
	}
	
	epsilon
	{
		attr = false;
	}
}

NodeTest(inout ITest test)
{
	NameTest
	{
		NameTest(test);
	}
	
	NodeType "(" ")"
	{
		NodeType(test);
	}
	
	"processing-instruction" "(" Literal ")"
	{
		auto piTest = new PIKindTest;
		Literal(piTest.literal);
		test = piTest;
	}
}

NodeType(inout ITest test)
{
	"comment"
	{
		test = new CommentKindTest;
	}
	
	"text"
	{
		test = new TextKindTest;
	}
	
	"processing-instruction"
	{
		test = new PIKindTest;
	}
	
	"node"
	{
		test = new NodeKindTest;
	}
	
}

Literal(char[] value)
{
	regexp('"[^"]*"')
	{
		value = _ST_match[1 .. $-1];
	}
	
	regexp("'[^']*'")
	{
		value = _ST_match[1 .. $-1];
	}
}

NameTest(inout ITest test)
{
	"*"
	{
		test = new WildcardTest;
	}
	
	NCName ":*"
	{
		char[] prefix;
		NCName(prefix);
		test = new WildcardPrefixTest(prefix);	
	}
	
	QName
	{
		char[][] path;
		QName(path);
		debug assert(path.length);
		if(path.length == 1) {
			test = new QNameTest(null, path[0]);
			debug Stdout.formatln("Creating QNameTest for {}", path[0]);
		}
		else if(path.length == 2) {
			test = new QNameTest(path[0], path[1]);
			debug Stdout.formatln("Creating QNameTest for {}:{}", path[0], path[1]);
		}
	}
}

PrimaryExpr(inout IExpression expr)
{
    regexp("[0-9]+")
    {
    	long val = Integer.atoi(_ST_match);
		Var v; set(v, val);
		expr = new Literal(v);
    }
	
	regexp("[0-9]+\\.[0-9]+")
    {
    	double val = Float.parse(_ST_match);
		Var v; set(v, val);
		expr = new Literal(v);
    }
	
	Literal = Lit
	{
		char[] val;	Lit(val);
		Var v; set(v, val);
		expr = new Literal(v);
	}
	
	FuncCall
	{
		FuncCall(expr);
	}
	
	VarRef
	{
		VarRef(expr);
	}

    "(" Expr ")"
    { Expr(expr); }
}

VarRef(inout IExpression expr)
{
	/*"$" QName
	{
		/+expr.type = ExpressionT.Var;
		QName(expr.var);+/
	}*/
	
	"$" VarAccess = VarAcc
	{
		IExpression[] path;
		VarAcc(path);
		expr = new VarAccess(path);
		/+expr.type = ExpressionT.Var;
		Path(expr.var);+/
	}
}

FuncCall(inout IExpression expr)
{
	"last" "(" ")"
	{
		expr = new LastExpr;
	}
	
	"position" "(" ")"
	{
		expr = new PositionExpr;
	}
	
	"true" "(" ")"
	{
		Var v; set(v, true);
		expr = new Literal(v); 
	}
	
	"false" "(" ")"
	{
		Var v; set(v, false);
		expr = new Literal(v);
	}

	QName "(" ExprList ")"
	{
		debug assert(false);
		//expr.type = ExpressionT.FuncCall;
		//ExprList(expr.func.params);
	}
}

ExprList(inout IExpression[] args)
{
	Expr "," ExprList
	{
		IExpression expr;
		IExpression exprList[];
		Expr(expr);
		ExprList(exprList);
		args ~= expr;
		args ~= exprList;
	}
	
	Expr
	{
		IExpression expr;
		args ~= expr;
	}
	
	epsilon;
}

QName(inout char[][] path)
{
	NCName
	{
		char[] localname;
		NCName(localname);
		path ~= localname;
	}
	
	NCName ":" NCName = NCName2
	{
		char[] prefix, localname;
		NCName(prefix);
		NCName2(localname);
		path ~= prefix;
		path ~= localname;
	}
}

/*IdentifierList(ref char[][] path)
{
	IdentifierList "." NCName
	{
		IdentifierList(path);
		char[] value; NCName(value);
		path ~= value;
	}
	
	NCName
	{
		char[] value; NCName(value);
		path ~= value;
	}
}*/

NCName(out char[] value)
{
	//regexp("[A-Z_a-z0xC0-0xEFFFF][A-Za-z0-9\\-_0x0B70x0300-0x036F0x203F-0x2040]*")
	regexp("[A-Z_a-z0xC0-0xEFFFF][A-Za-z0-9\\-_0xC0-0xEFFFF]*")
	{
		value = _ST_match;
	}
}

VarAccess(ref IExpression[] path)
{

	VarAccess "." NCName
	{
		VarAccess(path);
		char[] name; NCName(name);
		Var v; set(v, name);
		path ~= new Literal(v);
	}
	
	VarAccess "[" Expr "]"
	{
		VarAccess(path);
		IExpression expr;
		Expr(expr);
		path ~= expr;
	}
	
	NCName
	{
		char[] name; NCName(name);
		Var v; set(v, name);
		path ~= new Literal(v);
	}
}