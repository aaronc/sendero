= Sendero User Manual

[WARNING]
.API will change
=============================================================================
This document describes the API Sendero's pre-alpha development version.  No releases have been made yet and the API even for the alpha version will be significantly different.  A number of those changes are already described in the document - Sendero Design.  This document is simply here to describe the code that is actually in the repository.
=============================================================================

== The Sendero Extension Compiler - _senderoxc_

Sendero controller and model objects are compiled using the _senderoxc_, the Sendero Extension Compiler which is itself based on DecoratedD.

=== Installation ===
The source for _senderoxc_ can be found in the `senderoxc` directory.

=== Usage ===
_senderoxc_ accepts source code files with the `.sdx` extension.

=== Syntax ===

The Sendero Extension Compiler accepts files written using the DecoratedD extensions to D.

==== Decorators ====

===== Class =====

* @controller

====== Function

* @GET, @POST, @PUT, @DELETE

* @data

[WARNING]
.Syntax will change
===========================
The syntax describe here is for the pre-alpha version of sendero controllers.  In future versions, a different syntax will be used based on DecoratedD.  This will allow for a standardized tool for preprocessing D-source code files.
===========================

== Sendero Xml Templates ==

Sendero provides a sophisticated

== Template Syntax ==

[NOTE]
.This syntax is more stable
While there are currently plans to change other parts of the Sendero API, we believe that the template language will remain fairly similar to what is described below.  The main thing that _will_ change is the Expression Syntax.

=== `d:for` ===

[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<ul>
	<d:for each="$x in $myList">
		<li>_{$x}</li>
	</d:for>
</ul>
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


=== `d:block`, `d:extends`, `d:super` ===

A base template:

[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<html>
	<head></head>
	<body>
		<div>
			<p d:block="x">base x block</p>
			<p d:block="y"></p>
		</div>
	</body>
</html>
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A derived template:

[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<d:extends href="base.html">
	<d:block name="x">
		derived x block
		<d:super />
	</d:block>
	<d:block name="y">derived y block </>
</d:extends>
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

will render:

[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<html>
	<head></head>
	<body>
		<div>
			<p>
				derived x block
				base x block
			</p>
			<p>derived y block</p>
		</div>
	</body>
</html>
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=== `d:if` ===

[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~
<d:if test="$items.length">
	<ul>
    		<li d:for="$item in $items">
			_{$item.name}
		</li>
	</ul>
</d:if>
source~~~~~~~~~~~~~~~~~~~~~~~~

=== `d:choose`, `d:when`, `d:otherwise` ===
[xml]
source~~~~~~~~~~~~~~~~~~~~~~~~
<d:choose expr="$name">
	<d:when val="dave">David</d:when>
	<d:when val="bob">Robert</d:when>
	<d:when val="alice">Alice In Wonderland</d:when>
	<d:otherwise>I don't know who then?!?</d:otherwise>
</d:choose>
source~~~~~~~~~~~~~~~~~~~~~~~~

=== Expression Syntax ===

Sendero templates use a subset of the XPath 1.0 expression language.

The value of all attribute and data nodes is parsed for expressions.  If no expressions are found, the node is appended to the syntax tree as literal data.  Within data nodes, expressions are enclosed between the `_{` and `}` delimiters.

-------
	<p>The value of the expression "$expr": _{$expr}</p>
------- 

EmbeddedExpression
	"_{" XPathExpression "}"
	"_{" XPathExpression ";" FormmatingFlags "}"

FormattingFlags
	FormattingFlags "," Identifier
	Identifier
-----------------


== Sendero Controllers ==


== Sendero Model ==

Sendero model objects are created using the @data decorator.  Here is a quick example:

@data class User {
	@autoPrimaryKey("id");
	@required @String("username", 40);
	@required @Binary("password_hash, 256);
	@required @Uint("salt");
}

Fields can be generated within the @data object using the following decorators, which generate the
corresponding D types.

@Byte | byte
@UByte | ubyte
@Short | short
@UShort | ushort
@Int | int
@UInt | uint
@Long | long
@ULong | ulong
@Float | float
@Double | double
@String(Number size = 255) | char[]
@Text(Number size = ushort.max) | char[]
@Binary(Number size = 255) | ubyte[]
@Blob(Number size = ushort.max) | ubyte[]
@Date | Date
@DateTime | DateTime

The following validator generators are available:

@required
@minLength(Number length)
@maxLength(Number length)
@format(String regex)
@minValue(Number value)
@maxValue(Number value)

The following relations are available:

@hasOne(String classname)
//@hasMany(String classname)
//@habtm(String classname)

Inheritance is created using the following decorator:

@inherits(String classname, String type = "table")

Inheritance type can be "table" for Single Table Inheritance
or "multi" Multi/Class Table Inheritance.


Generated interfaces and methods:

Interfaces:

IObject
IHttpSet

Methods:

bool validate();
bool save(); // inserting and updating
void destroy();

Selection is done by the following decorator:

@select(String classname, Array where, Object options)

Where:

[String sql, String... paramNames]

Ex:
["username = ?", "username"]

Options:

order
group
limit
offset
joins
include
select
from
readonly
lock
id, first, last, all